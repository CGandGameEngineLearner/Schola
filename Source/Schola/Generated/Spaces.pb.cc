// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Spaces.proto

#pragma warning (disable : 4800)
#pragma warning (disable : 4125)
#include "Spaces.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Schola {
PROTOBUF_CONSTEXPR BoxSpace_BoxSpaceDimension::BoxSpace_BoxSpaceDimension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.low_)*/0
  , /*decltype(_impl_.high_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoxSpace_BoxSpaceDimensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoxSpace_BoxSpaceDimensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoxSpace_BoxSpaceDimensionDefaultTypeInternal() {}
  union {
    BoxSpace_BoxSpaceDimension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoxSpace_BoxSpaceDimensionDefaultTypeInternal _BoxSpace_BoxSpaceDimension_default_instance_;
PROTOBUF_CONSTEXPR BoxSpace::BoxSpace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoxSpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoxSpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoxSpaceDefaultTypeInternal() {}
  union {
    BoxSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoxSpaceDefaultTypeInternal _BoxSpace_default_instance_;
PROTOBUF_CONSTEXPR DiscreteSpace::DiscreteSpace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.high_)*/{}
  , /*decltype(_impl_._high_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DiscreteSpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscreteSpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscreteSpaceDefaultTypeInternal() {}
  union {
    DiscreteSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscreteSpaceDefaultTypeInternal _DiscreteSpace_default_instance_;
PROTOBUF_CONSTEXPR BinarySpace::BinarySpace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinarySpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinarySpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinarySpaceDefaultTypeInternal() {}
  union {
    BinarySpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinarySpaceDefaultTypeInternal _BinarySpace_default_instance_;
PROTOBUF_CONSTEXPR FundamentalSpace::FundamentalSpace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.space_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FundamentalSpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundamentalSpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundamentalSpaceDefaultTypeInternal() {}
  union {
    FundamentalSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundamentalSpaceDefaultTypeInternal _FundamentalSpace_default_instance_;
PROTOBUF_CONSTEXPR DictSpace::DictSpace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.labels_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DictSpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DictSpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DictSpaceDefaultTypeInternal() {}
  union {
    DictSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DictSpaceDefaultTypeInternal _DictSpace_default_instance_;
}  // namespace Schola
static ::_pb::Metadata file_level_metadata_Spaces_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Spaces_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Spaces_2eproto = nullptr;

const uint32_t TableStruct_Spaces_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::BoxSpace_BoxSpaceDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::BoxSpace_BoxSpaceDimension, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::Schola::BoxSpace_BoxSpaceDimension, _impl_.high_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::BoxSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::BoxSpace, _impl_.dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::DiscreteSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::DiscreteSpace, _impl_.high_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::BinarySpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::BinarySpace, _impl_.shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::FundamentalSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Schola::FundamentalSpace, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Schola::FundamentalSpace, _impl_.space_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::DictSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::DictSpace, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::Schola::DictSpace, _impl_.labels_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Schola::BoxSpace_BoxSpaceDimension)},
  { 8, -1, -1, sizeof(::Schola::BoxSpace)},
  { 15, -1, -1, sizeof(::Schola::DiscreteSpace)},
  { 22, -1, -1, sizeof(::Schola::BinarySpace)},
  { 29, -1, -1, sizeof(::Schola::FundamentalSpace)},
  { 39, -1, -1, sizeof(::Schola::DictSpace)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Schola::_BoxSpace_BoxSpaceDimension_default_instance_._instance,
  &::Schola::_BoxSpace_default_instance_._instance,
  &::Schola::_DiscreteSpace_default_instance_._instance,
  &::Schola::_BinarySpace_default_instance_._instance,
  &::Schola::_FundamentalSpace_default_instance_._instance,
  &::Schola::_DictSpace_default_instance_._instance,
};

const char descriptor_table_protodef_Spaces_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Spaces.proto\022\006Schola\"r\n\010BoxSpace\0226\n\ndi"
  "mensions\030\001 \003(\0132\".Schola.BoxSpace.BoxSpac"
  "eDimension\032.\n\021BoxSpaceDimension\022\013\n\003low\030\001"
  " \001(\002\022\014\n\004high\030\002 \001(\002\"\035\n\rDiscreteSpace\022\014\n\004h"
  "igh\030\001 \003(\005\"\034\n\013BinarySpace\022\r\n\005shape\030\001 \001(\005\""
  "\240\001\n\020FundamentalSpace\022%\n\tbox_space\030\001 \001(\0132"
  "\020.Schola.BoxSpaceH\000\022/\n\016discrete_space\030\002 "
  "\001(\0132\025.Schola.DiscreteSpaceH\000\022+\n\014binary_s"
  "pace\030\003 \001(\0132\023.Schola.BinarySpaceH\000B\007\n\005spa"
  "ce\"E\n\tDictSpace\022(\n\006values\030\001 \003(\0132\030.Schola"
  ".FundamentalSpace\022\016\n\006labels\030\002 \003(\tb\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_Spaces_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Spaces_2eproto = {
    false, false, 441, descriptor_table_protodef_Spaces_2eproto,
    "Spaces.proto",
    &descriptor_table_Spaces_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_Spaces_2eproto::offsets,
    file_level_metadata_Spaces_2eproto, file_level_enum_descriptors_Spaces_2eproto,
    file_level_service_descriptors_Spaces_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Spaces_2eproto_getter() {
  return &descriptor_table_Spaces_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Spaces_2eproto(&descriptor_table_Spaces_2eproto);
namespace Schola {

// ===================================================================

class BoxSpace_BoxSpaceDimension::_Internal {
 public:
};

BoxSpace_BoxSpaceDimension::BoxSpace_BoxSpaceDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.BoxSpace.BoxSpaceDimension)
}
BoxSpace_BoxSpaceDimension::BoxSpace_BoxSpaceDimension(const BoxSpace_BoxSpaceDimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoxSpace_BoxSpaceDimension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.low_){}
    , decltype(_impl_.high_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.low_, &from._impl_.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.high_) -
    reinterpret_cast<char*>(&_impl_.low_)) + sizeof(_impl_.high_));
  // @@protoc_insertion_point(copy_constructor:Schola.BoxSpace.BoxSpaceDimension)
}

inline void BoxSpace_BoxSpaceDimension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.low_){0}
    , decltype(_impl_.high_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoxSpace_BoxSpaceDimension::~BoxSpace_BoxSpaceDimension() {
  // @@protoc_insertion_point(destructor:Schola.BoxSpace.BoxSpaceDimension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoxSpace_BoxSpaceDimension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoxSpace_BoxSpaceDimension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoxSpace_BoxSpaceDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.BoxSpace.BoxSpaceDimension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.high_) -
      reinterpret_cast<char*>(&_impl_.low_)) + sizeof(_impl_.high_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxSpace_BoxSpaceDimension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoxSpace_BoxSpaceDimension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.BoxSpace.BoxSpaceDimension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float low = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_low = this->_internal_low();
  uint32_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_low(), target);
  }

  // float high = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = this->_internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.BoxSpace.BoxSpaceDimension)
  return target;
}

size_t BoxSpace_BoxSpaceDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.BoxSpace.BoxSpaceDimension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float low = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_low = this->_internal_low();
  uint32_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    total_size += 1 + 4;
  }

  // float high = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = this->_internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoxSpace_BoxSpaceDimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoxSpace_BoxSpaceDimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoxSpace_BoxSpaceDimension::GetClassData() const { return &_class_data_; }


void BoxSpace_BoxSpaceDimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoxSpace_BoxSpaceDimension*>(&to_msg);
  auto& from = static_cast<const BoxSpace_BoxSpaceDimension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.BoxSpace.BoxSpaceDimension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_low = from._internal_low();
  uint32_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    _this->_internal_set_low(from._internal_low());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = from._internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    _this->_internal_set_high(from._internal_high());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoxSpace_BoxSpaceDimension::CopyFrom(const BoxSpace_BoxSpaceDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.BoxSpace.BoxSpaceDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxSpace_BoxSpaceDimension::IsInitialized() const {
  return true;
}

void BoxSpace_BoxSpaceDimension::InternalSwap(BoxSpace_BoxSpaceDimension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoxSpace_BoxSpaceDimension, _impl_.high_)
      + sizeof(BoxSpace_BoxSpaceDimension::_impl_.high_)
      - PROTOBUF_FIELD_OFFSET(BoxSpace_BoxSpaceDimension, _impl_.low_)>(
          reinterpret_cast<char*>(&_impl_.low_),
          reinterpret_cast<char*>(&other->_impl_.low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxSpace_BoxSpaceDimension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Spaces_2eproto_getter, &descriptor_table_Spaces_2eproto_once,
      file_level_metadata_Spaces_2eproto[0]);
}

// ===================================================================

class BoxSpace::_Internal {
 public:
};

BoxSpace::BoxSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.BoxSpace)
}
BoxSpace::BoxSpace(const BoxSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoxSpace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Schola.BoxSpace)
}

inline void BoxSpace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoxSpace::~BoxSpace() {
  // @@protoc_insertion_point(destructor:Schola.BoxSpace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoxSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedPtrField();
}

void BoxSpace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoxSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.BoxSpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxSpace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Schola.BoxSpace.BoxSpaceDimension dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoxSpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.BoxSpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Schola.BoxSpace.BoxSpaceDimension dimensions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.BoxSpace)
  return target;
}

size_t BoxSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.BoxSpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Schola.BoxSpace.BoxSpaceDimension dimensions = 1;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->_impl_.dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoxSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoxSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoxSpace::GetClassData() const { return &_class_data_; }


void BoxSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoxSpace*>(&to_msg);
  auto& from = static_cast<const BoxSpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.BoxSpace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoxSpace::CopyFrom(const BoxSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.BoxSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxSpace::IsInitialized() const {
  return true;
}

void BoxSpace::InternalSwap(BoxSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxSpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Spaces_2eproto_getter, &descriptor_table_Spaces_2eproto_once,
      file_level_metadata_Spaces_2eproto[1]);
}

// ===================================================================

class DiscreteSpace::_Internal {
 public:
};

DiscreteSpace::DiscreteSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.DiscreteSpace)
}
DiscreteSpace::DiscreteSpace(const DiscreteSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DiscreteSpace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.high_){from._impl_.high_}
    , /*decltype(_impl_._high_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Schola.DiscreteSpace)
}

inline void DiscreteSpace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.high_){arena}
    , /*decltype(_impl_._high_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DiscreteSpace::~DiscreteSpace() {
  // @@protoc_insertion_point(destructor:Schola.DiscreteSpace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscreteSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.high_.~RepeatedField();
}

void DiscreteSpace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DiscreteSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.DiscreteSpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.high_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteSpace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_high(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_high(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscreteSpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.DiscreteSpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 high = 1;
  {
    int byte_size = _impl_._high_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_high(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.DiscreteSpace)
  return target;
}

size_t DiscreteSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.DiscreteSpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 high = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.high_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._high_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscreteSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DiscreteSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscreteSpace::GetClassData() const { return &_class_data_; }


void DiscreteSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DiscreteSpace*>(&to_msg);
  auto& from = static_cast<const DiscreteSpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.DiscreteSpace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.high_.MergeFrom(from._impl_.high_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscreteSpace::CopyFrom(const DiscreteSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.DiscreteSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteSpace::IsInitialized() const {
  return true;
}

void DiscreteSpace::InternalSwap(DiscreteSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.high_.InternalSwap(&other->_impl_.high_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteSpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Spaces_2eproto_getter, &descriptor_table_Spaces_2eproto_once,
      file_level_metadata_Spaces_2eproto[2]);
}

// ===================================================================

class BinarySpace::_Internal {
 public:
};

BinarySpace::BinarySpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.BinarySpace)
}
BinarySpace::BinarySpace(const BinarySpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinarySpace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.shape_ = from._impl_.shape_;
  // @@protoc_insertion_point(copy_constructor:Schola.BinarySpace)
}

inline void BinarySpace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BinarySpace::~BinarySpace() {
  // @@protoc_insertion_point(destructor:Schola.BinarySpace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinarySpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinarySpace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinarySpace::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.BinarySpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinarySpace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinarySpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.BinarySpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shape = 1;
  if (this->_internal_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_shape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.BinarySpace)
  return target;
}

size_t BinarySpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.BinarySpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shape = 1;
  if (this->_internal_shape() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shape());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinarySpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinarySpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinarySpace::GetClassData() const { return &_class_data_; }


void BinarySpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinarySpace*>(&to_msg);
  auto& from = static_cast<const BinarySpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.BinarySpace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shape() != 0) {
    _this->_internal_set_shape(from._internal_shape());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinarySpace::CopyFrom(const BinarySpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.BinarySpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinarySpace::IsInitialized() const {
  return true;
}

void BinarySpace::InternalSwap(BinarySpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.shape_, other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinarySpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Spaces_2eproto_getter, &descriptor_table_Spaces_2eproto_once,
      file_level_metadata_Spaces_2eproto[3]);
}

// ===================================================================

class FundamentalSpace::_Internal {
 public:
  static const ::Schola::BoxSpace& box_space(const FundamentalSpace* msg);
  static const ::Schola::DiscreteSpace& discrete_space(const FundamentalSpace* msg);
  static const ::Schola::BinarySpace& binary_space(const FundamentalSpace* msg);
};

const ::Schola::BoxSpace&
FundamentalSpace::_Internal::box_space(const FundamentalSpace* msg) {
  return *msg->_impl_.space_.box_space_;
}
const ::Schola::DiscreteSpace&
FundamentalSpace::_Internal::discrete_space(const FundamentalSpace* msg) {
  return *msg->_impl_.space_.discrete_space_;
}
const ::Schola::BinarySpace&
FundamentalSpace::_Internal::binary_space(const FundamentalSpace* msg) {
  return *msg->_impl_.space_.binary_space_;
}
void FundamentalSpace::set_allocated_box_space(::Schola::BoxSpace* box_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_space();
  if (box_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box_space);
    if (message_arena != submessage_arena) {
      box_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box_space, submessage_arena);
    }
    set_has_box_space();
    _impl_.space_.box_space_ = box_space;
  }
  // @@protoc_insertion_point(field_set_allocated:Schola.FundamentalSpace.box_space)
}
void FundamentalSpace::set_allocated_discrete_space(::Schola::DiscreteSpace* discrete_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_space();
  if (discrete_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(discrete_space);
    if (message_arena != submessage_arena) {
      discrete_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discrete_space, submessage_arena);
    }
    set_has_discrete_space();
    _impl_.space_.discrete_space_ = discrete_space;
  }
  // @@protoc_insertion_point(field_set_allocated:Schola.FundamentalSpace.discrete_space)
}
void FundamentalSpace::set_allocated_binary_space(::Schola::BinarySpace* binary_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_space();
  if (binary_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(binary_space);
    if (message_arena != submessage_arena) {
      binary_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_space, submessage_arena);
    }
    set_has_binary_space();
    _impl_.space_.binary_space_ = binary_space;
  }
  // @@protoc_insertion_point(field_set_allocated:Schola.FundamentalSpace.binary_space)
}
FundamentalSpace::FundamentalSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.FundamentalSpace)
}
FundamentalSpace::FundamentalSpace(const FundamentalSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundamentalSpace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.space_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_space();
  switch (from.space_case()) {
    case kBoxSpace: {
      _this->_internal_mutable_box_space()->::Schola::BoxSpace::MergeFrom(
          from._internal_box_space());
      break;
    }
    case kDiscreteSpace: {
      _this->_internal_mutable_discrete_space()->::Schola::DiscreteSpace::MergeFrom(
          from._internal_discrete_space());
      break;
    }
    case kBinarySpace: {
      _this->_internal_mutable_binary_space()->::Schola::BinarySpace::MergeFrom(
          from._internal_binary_space());
      break;
    }
    case SPACE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Schola.FundamentalSpace)
}

inline void FundamentalSpace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.space_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_space();
}

FundamentalSpace::~FundamentalSpace() {
  // @@protoc_insertion_point(destructor:Schola.FundamentalSpace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundamentalSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_space()) {
    clear_space();
  }
}

void FundamentalSpace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundamentalSpace::clear_space() {
// @@protoc_insertion_point(one_of_clear_start:Schola.FundamentalSpace)
  switch (space_case()) {
    case kBoxSpace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.space_.box_space_;
      }
      break;
    }
    case kDiscreteSpace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.space_.discrete_space_;
      }
      break;
    }
    case kBinarySpace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.space_.binary_space_;
      }
      break;
    }
    case SPACE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SPACE_NOT_SET;
}


void FundamentalSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.FundamentalSpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_space();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundamentalSpace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Schola.BoxSpace box_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Schola.DiscreteSpace discrete_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_discrete_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Schola.BinarySpace binary_space = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FundamentalSpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.FundamentalSpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Schola.BoxSpace box_space = 1;
  if (_internal_has_box_space()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::box_space(this),
        _Internal::box_space(this).GetCachedSize(), target, stream);
  }

  // .Schola.DiscreteSpace discrete_space = 2;
  if (_internal_has_discrete_space()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::discrete_space(this),
        _Internal::discrete_space(this).GetCachedSize(), target, stream);
  }

  // .Schola.BinarySpace binary_space = 3;
  if (_internal_has_binary_space()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::binary_space(this),
        _Internal::binary_space(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.FundamentalSpace)
  return target;
}

size_t FundamentalSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.FundamentalSpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (space_case()) {
    // .Schola.BoxSpace box_space = 1;
    case kBoxSpace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.space_.box_space_);
      break;
    }
    // .Schola.DiscreteSpace discrete_space = 2;
    case kDiscreteSpace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.space_.discrete_space_);
      break;
    }
    // .Schola.BinarySpace binary_space = 3;
    case kBinarySpace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.space_.binary_space_);
      break;
    }
    case SPACE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundamentalSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundamentalSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundamentalSpace::GetClassData() const { return &_class_data_; }


void FundamentalSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundamentalSpace*>(&to_msg);
  auto& from = static_cast<const FundamentalSpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.FundamentalSpace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.space_case()) {
    case kBoxSpace: {
      _this->_internal_mutable_box_space()->::Schola::BoxSpace::MergeFrom(
          from._internal_box_space());
      break;
    }
    case kDiscreteSpace: {
      _this->_internal_mutable_discrete_space()->::Schola::DiscreteSpace::MergeFrom(
          from._internal_discrete_space());
      break;
    }
    case kBinarySpace: {
      _this->_internal_mutable_binary_space()->::Schola::BinarySpace::MergeFrom(
          from._internal_binary_space());
      break;
    }
    case SPACE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundamentalSpace::CopyFrom(const FundamentalSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.FundamentalSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundamentalSpace::IsInitialized() const {
  return true;
}

void FundamentalSpace::InternalSwap(FundamentalSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.space_, other->_impl_.space_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundamentalSpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Spaces_2eproto_getter, &descriptor_table_Spaces_2eproto_once,
      file_level_metadata_Spaces_2eproto[4]);
}

// ===================================================================

class DictSpace::_Internal {
 public:
};

DictSpace::DictSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.DictSpace)
}
DictSpace::DictSpace(const DictSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DictSpace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.labels_){from._impl_.labels_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Schola.DictSpace)
}

inline void DictSpace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.labels_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DictSpace::~DictSpace() {
  // @@protoc_insertion_point(destructor:Schola.DictSpace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DictSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
  _impl_.labels_.~RepeatedPtrField();
}

void DictSpace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DictSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.DictSpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.labels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictSpace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Schola.FundamentalSpace values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Schola.DictSpace.labels"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DictSpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.DictSpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Schola.FundamentalSpace values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string labels = 2;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Schola.DictSpace.labels");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.DictSpace)
  return target;
}

size_t DictSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.DictSpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Schola.FundamentalSpace values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string labels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.labels_.size());
  for (int i = 0, n = _impl_.labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.labels_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DictSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DictSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DictSpace::GetClassData() const { return &_class_data_; }


void DictSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DictSpace*>(&to_msg);
  auto& from = static_cast<const DictSpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.DictSpace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DictSpace::CopyFrom(const DictSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.DictSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictSpace::IsInitialized() const {
  return true;
}

void DictSpace::InternalSwap(DictSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictSpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Spaces_2eproto_getter, &descriptor_table_Spaces_2eproto_once,
      file_level_metadata_Spaces_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Schola
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Schola::BoxSpace_BoxSpaceDimension*
Arena::CreateMaybeMessage< ::Schola::BoxSpace_BoxSpaceDimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::BoxSpace_BoxSpaceDimension >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::BoxSpace*
Arena::CreateMaybeMessage< ::Schola::BoxSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::BoxSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::DiscreteSpace*
Arena::CreateMaybeMessage< ::Schola::DiscreteSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::DiscreteSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::BinarySpace*
Arena::CreateMaybeMessage< ::Schola::BinarySpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::BinarySpace >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::FundamentalSpace*
Arena::CreateMaybeMessage< ::Schola::FundamentalSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::FundamentalSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::DictSpace*
Arena::CreateMaybeMessage< ::Schola::DictSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::DictSpace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
