// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: State.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_State_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_State_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Points.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_State_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_State_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_State_2eproto;
namespace Schola {
class AgentState;
struct AgentStateDefaultTypeInternal;
extern AgentStateDefaultTypeInternal _AgentState_default_instance_;
class AgentState_InfoEntry_DoNotUse;
struct AgentState_InfoEntry_DoNotUseDefaultTypeInternal;
extern AgentState_InfoEntry_DoNotUseDefaultTypeInternal _AgentState_InfoEntry_DoNotUse_default_instance_;
class EnvironmentState;
struct EnvironmentStateDefaultTypeInternal;
extern EnvironmentStateDefaultTypeInternal _EnvironmentState_default_instance_;
class EnvironmentState_AgentStatesEntry_DoNotUse;
struct EnvironmentState_AgentStatesEntry_DoNotUseDefaultTypeInternal;
extern EnvironmentState_AgentStatesEntry_DoNotUseDefaultTypeInternal _EnvironmentState_AgentStatesEntry_DoNotUse_default_instance_;
class InitialAgentState;
struct InitialAgentStateDefaultTypeInternal;
extern InitialAgentStateDefaultTypeInternal _InitialAgentState_default_instance_;
class InitialAgentState_InfoEntry_DoNotUse;
struct InitialAgentState_InfoEntry_DoNotUseDefaultTypeInternal;
extern InitialAgentState_InfoEntry_DoNotUseDefaultTypeInternal _InitialAgentState_InfoEntry_DoNotUse_default_instance_;
class InitialEnvironmentState;
struct InitialEnvironmentStateDefaultTypeInternal;
extern InitialEnvironmentStateDefaultTypeInternal _InitialEnvironmentState_default_instance_;
class InitialEnvironmentState_AgentStatesEntry_DoNotUse;
struct InitialEnvironmentState_AgentStatesEntry_DoNotUseDefaultTypeInternal;
extern InitialEnvironmentState_AgentStatesEntry_DoNotUseDefaultTypeInternal _InitialEnvironmentState_AgentStatesEntry_DoNotUse_default_instance_;
class InitialTrainingState;
struct InitialTrainingStateDefaultTypeInternal;
extern InitialTrainingStateDefaultTypeInternal _InitialTrainingState_default_instance_;
class InitialTrainingState_EnvironmentStatesEntry_DoNotUse;
struct InitialTrainingState_EnvironmentStatesEntry_DoNotUseDefaultTypeInternal;
extern InitialTrainingState_EnvironmentStatesEntry_DoNotUseDefaultTypeInternal _InitialTrainingState_EnvironmentStatesEntry_DoNotUse_default_instance_;
class TrainingState;
struct TrainingStateDefaultTypeInternal;
extern TrainingStateDefaultTypeInternal _TrainingState_default_instance_;
}  // namespace Schola
PROTOBUF_NAMESPACE_OPEN
template<> ::Schola::AgentState* Arena::CreateMaybeMessage<::Schola::AgentState>(Arena*);
template<> ::Schola::AgentState_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::Schola::AgentState_InfoEntry_DoNotUse>(Arena*);
template<> ::Schola::EnvironmentState* Arena::CreateMaybeMessage<::Schola::EnvironmentState>(Arena*);
template<> ::Schola::EnvironmentState_AgentStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::Schola::EnvironmentState_AgentStatesEntry_DoNotUse>(Arena*);
template<> ::Schola::InitialAgentState* Arena::CreateMaybeMessage<::Schola::InitialAgentState>(Arena*);
template<> ::Schola::InitialAgentState_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::Schola::InitialAgentState_InfoEntry_DoNotUse>(Arena*);
template<> ::Schola::InitialEnvironmentState* Arena::CreateMaybeMessage<::Schola::InitialEnvironmentState>(Arena*);
template<> ::Schola::InitialEnvironmentState_AgentStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::Schola::InitialEnvironmentState_AgentStatesEntry_DoNotUse>(Arena*);
template<> ::Schola::InitialTrainingState* Arena::CreateMaybeMessage<::Schola::InitialTrainingState>(Arena*);
template<> ::Schola::InitialTrainingState_EnvironmentStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::Schola::InitialTrainingState_EnvironmentStatesEntry_DoNotUse>(Arena*);
template<> ::Schola::TrainingState* Arena::CreateMaybeMessage<::Schola::TrainingState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Schola {

enum Status : int {
  RUNNING = 0,
  TRUNCATED = 1,
  COMPLETED = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = RUNNING;
constexpr Status Status_MAX = COMPLETED;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class AgentState_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgentState_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgentState_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AgentState_InfoEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AgentState_InfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AgentState_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AgentState_InfoEntry_DoNotUse& other);
  static const AgentState_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AgentState_InfoEntry_DoNotUse*>(&_AgentState_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Schola.AgentState.InfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Schola.AgentState.InfoEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_State_2eproto;
};

// -------------------------------------------------------------------

class AgentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.AgentState) */ {
 public:
  inline AgentState() : AgentState(nullptr) {}
  ~AgentState() override;
  explicit PROTOBUF_CONSTEXPR AgentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentState(const AgentState& from);
  AgentState(AgentState&& from) noexcept
    : AgentState() {
    *this = ::std::move(from);
  }

  inline AgentState& operator=(const AgentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentState& operator=(AgentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentState* internal_default_instance() {
    return reinterpret_cast<const AgentState*>(
               &_AgentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AgentState& a, AgentState& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentState& from) {
    AgentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.AgentState";
  }
  protected:
  explicit AgentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 4,
    kObservationsFieldNumber = 1,
    kRewardFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // map<string, string> info = 4;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_info();

  // .Schola.DictPoint observations = 1;
  bool has_observations() const;
  private:
  bool _internal_has_observations() const;
  public:
  void clear_observations();
  const ::Schola::DictPoint& observations() const;
  PROTOBUF_NODISCARD ::Schola::DictPoint* release_observations();
  ::Schola::DictPoint* mutable_observations();
  void set_allocated_observations(::Schola::DictPoint* observations);
  private:
  const ::Schola::DictPoint& _internal_observations() const;
  ::Schola::DictPoint* _internal_mutable_observations();
  public:
  void unsafe_arena_set_allocated_observations(
      ::Schola::DictPoint* observations);
  ::Schola::DictPoint* unsafe_arena_release_observations();

  // float reward = 2;
  void clear_reward();
  float reward() const;
  void set_reward(float value);
  private:
  float _internal_reward() const;
  void _internal_set_reward(float value);
  public:

  // .Schola.Status status = 3;
  void clear_status();
  ::Schola::Status status() const;
  void set_status(::Schola::Status value);
  private:
  ::Schola::Status _internal_status() const;
  void _internal_set_status(::Schola::Status value);
  public:

  // @@protoc_insertion_point(class_scope:Schola.AgentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AgentState_InfoEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> info_;
    ::Schola::DictPoint* observations_;
    float reward_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_State_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentState_AgentStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EnvironmentState_AgentStatesEntry_DoNotUse, 
    int32_t, ::Schola::AgentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EnvironmentState_AgentStatesEntry_DoNotUse, 
    int32_t, ::Schola::AgentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  EnvironmentState_AgentStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR EnvironmentState_AgentStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EnvironmentState_AgentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EnvironmentState_AgentStatesEntry_DoNotUse& other);
  static const EnvironmentState_AgentStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EnvironmentState_AgentStatesEntry_DoNotUse*>(&_EnvironmentState_AgentStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_State_2eproto;
};

// -------------------------------------------------------------------

class EnvironmentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.EnvironmentState) */ {
 public:
  inline EnvironmentState() : EnvironmentState(nullptr) {}
  ~EnvironmentState() override;
  explicit PROTOBUF_CONSTEXPR EnvironmentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvironmentState(const EnvironmentState& from);
  EnvironmentState(EnvironmentState&& from) noexcept
    : EnvironmentState() {
    *this = ::std::move(from);
  }

  inline EnvironmentState& operator=(const EnvironmentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentState& operator=(EnvironmentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvironmentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnvironmentState* internal_default_instance() {
    return reinterpret_cast<const EnvironmentState*>(
               &_EnvironmentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnvironmentState& a, EnvironmentState& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvironmentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnvironmentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnvironmentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnvironmentState& from) {
    EnvironmentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.EnvironmentState";
  }
  protected:
  explicit EnvironmentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAgentStatesFieldNumber = 1,
  };
  // map<int32, .Schola.AgentState> agent_states = 1;
  int agent_states_size() const;
  private:
  int _internal_agent_states_size() const;
  public:
  void clear_agent_states();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::AgentState >&
      _internal_agent_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::AgentState >*
      _internal_mutable_agent_states();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::AgentState >&
      agent_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::AgentState >*
      mutable_agent_states();

  // @@protoc_insertion_point(class_scope:Schola.EnvironmentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        EnvironmentState_AgentStatesEntry_DoNotUse,
        int32_t, ::Schola::AgentState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> agent_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_State_2eproto;
};
// -------------------------------------------------------------------

class TrainingState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.TrainingState) */ {
 public:
  inline TrainingState() : TrainingState(nullptr) {}
  ~TrainingState() override;
  explicit PROTOBUF_CONSTEXPR TrainingState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainingState(const TrainingState& from);
  TrainingState(TrainingState&& from) noexcept
    : TrainingState() {
    *this = ::std::move(from);
  }

  inline TrainingState& operator=(const TrainingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingState& operator=(TrainingState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainingState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainingState* internal_default_instance() {
    return reinterpret_cast<const TrainingState*>(
               &_TrainingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrainingState& a, TrainingState& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainingState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrainingState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrainingState& from) {
    TrainingState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.TrainingState";
  }
  protected:
  explicit TrainingState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentStatesFieldNumber = 1,
  };
  // repeated .Schola.EnvironmentState environment_states = 1;
  int environment_states_size() const;
  private:
  int _internal_environment_states_size() const;
  public:
  void clear_environment_states();
  ::Schola::EnvironmentState* mutable_environment_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::EnvironmentState >*
      mutable_environment_states();
  private:
  const ::Schola::EnvironmentState& _internal_environment_states(int index) const;
  ::Schola::EnvironmentState* _internal_add_environment_states();
  public:
  const ::Schola::EnvironmentState& environment_states(int index) const;
  ::Schola::EnvironmentState* add_environment_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::EnvironmentState >&
      environment_states() const;

  // @@protoc_insertion_point(class_scope:Schola.TrainingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::EnvironmentState > environment_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_State_2eproto;
};
// -------------------------------------------------------------------

class InitialAgentState_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitialAgentState_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitialAgentState_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  InitialAgentState_InfoEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InitialAgentState_InfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InitialAgentState_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InitialAgentState_InfoEntry_DoNotUse& other);
  static const InitialAgentState_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InitialAgentState_InfoEntry_DoNotUse*>(&_InitialAgentState_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Schola.InitialAgentState.InfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Schola.InitialAgentState.InfoEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_State_2eproto;
};

// -------------------------------------------------------------------

class InitialAgentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.InitialAgentState) */ {
 public:
  inline InitialAgentState() : InitialAgentState(nullptr) {}
  ~InitialAgentState() override;
  explicit PROTOBUF_CONSTEXPR InitialAgentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitialAgentState(const InitialAgentState& from);
  InitialAgentState(InitialAgentState&& from) noexcept
    : InitialAgentState() {
    *this = ::std::move(from);
  }

  inline InitialAgentState& operator=(const InitialAgentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialAgentState& operator=(InitialAgentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitialAgentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitialAgentState* internal_default_instance() {
    return reinterpret_cast<const InitialAgentState*>(
               &_InitialAgentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InitialAgentState& a, InitialAgentState& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialAgentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialAgentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitialAgentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitialAgentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitialAgentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitialAgentState& from) {
    InitialAgentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialAgentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.InitialAgentState";
  }
  protected:
  explicit InitialAgentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 4,
    kObservationsFieldNumber = 1,
  };
  // map<string, string> info = 4;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_info();

  // .Schola.DictPoint observations = 1;
  bool has_observations() const;
  private:
  bool _internal_has_observations() const;
  public:
  void clear_observations();
  const ::Schola::DictPoint& observations() const;
  PROTOBUF_NODISCARD ::Schola::DictPoint* release_observations();
  ::Schola::DictPoint* mutable_observations();
  void set_allocated_observations(::Schola::DictPoint* observations);
  private:
  const ::Schola::DictPoint& _internal_observations() const;
  ::Schola::DictPoint* _internal_mutable_observations();
  public:
  void unsafe_arena_set_allocated_observations(
      ::Schola::DictPoint* observations);
  ::Schola::DictPoint* unsafe_arena_release_observations();

  // @@protoc_insertion_point(class_scope:Schola.InitialAgentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        InitialAgentState_InfoEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> info_;
    ::Schola::DictPoint* observations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_State_2eproto;
};
// -------------------------------------------------------------------

class InitialEnvironmentState_AgentStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitialEnvironmentState_AgentStatesEntry_DoNotUse, 
    int32_t, ::Schola::InitialAgentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitialEnvironmentState_AgentStatesEntry_DoNotUse, 
    int32_t, ::Schola::InitialAgentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InitialEnvironmentState_AgentStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InitialEnvironmentState_AgentStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InitialEnvironmentState_AgentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InitialEnvironmentState_AgentStatesEntry_DoNotUse& other);
  static const InitialEnvironmentState_AgentStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InitialEnvironmentState_AgentStatesEntry_DoNotUse*>(&_InitialEnvironmentState_AgentStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_State_2eproto;
};

// -------------------------------------------------------------------

class InitialEnvironmentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.InitialEnvironmentState) */ {
 public:
  inline InitialEnvironmentState() : InitialEnvironmentState(nullptr) {}
  ~InitialEnvironmentState() override;
  explicit PROTOBUF_CONSTEXPR InitialEnvironmentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitialEnvironmentState(const InitialEnvironmentState& from);
  InitialEnvironmentState(InitialEnvironmentState&& from) noexcept
    : InitialEnvironmentState() {
    *this = ::std::move(from);
  }

  inline InitialEnvironmentState& operator=(const InitialEnvironmentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialEnvironmentState& operator=(InitialEnvironmentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitialEnvironmentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitialEnvironmentState* internal_default_instance() {
    return reinterpret_cast<const InitialEnvironmentState*>(
               &_InitialEnvironmentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InitialEnvironmentState& a, InitialEnvironmentState& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialEnvironmentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialEnvironmentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitialEnvironmentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitialEnvironmentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitialEnvironmentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitialEnvironmentState& from) {
    InitialEnvironmentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialEnvironmentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.InitialEnvironmentState";
  }
  protected:
  explicit InitialEnvironmentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAgentStatesFieldNumber = 1,
  };
  // map<int32, .Schola.InitialAgentState> agent_states = 1;
  int agent_states_size() const;
  private:
  int _internal_agent_states_size() const;
  public:
  void clear_agent_states();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialAgentState >&
      _internal_agent_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialAgentState >*
      _internal_mutable_agent_states();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialAgentState >&
      agent_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialAgentState >*
      mutable_agent_states();

  // @@protoc_insertion_point(class_scope:Schola.InitialEnvironmentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        InitialEnvironmentState_AgentStatesEntry_DoNotUse,
        int32_t, ::Schola::InitialAgentState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> agent_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_State_2eproto;
};
// -------------------------------------------------------------------

class InitialTrainingState_EnvironmentStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitialTrainingState_EnvironmentStatesEntry_DoNotUse, 
    int32_t, ::Schola::InitialEnvironmentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitialTrainingState_EnvironmentStatesEntry_DoNotUse, 
    int32_t, ::Schola::InitialEnvironmentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InitialTrainingState_EnvironmentStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InitialTrainingState_EnvironmentStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InitialTrainingState_EnvironmentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InitialTrainingState_EnvironmentStatesEntry_DoNotUse& other);
  static const InitialTrainingState_EnvironmentStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InitialTrainingState_EnvironmentStatesEntry_DoNotUse*>(&_InitialTrainingState_EnvironmentStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_State_2eproto;
};

// -------------------------------------------------------------------

class InitialTrainingState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.InitialTrainingState) */ {
 public:
  inline InitialTrainingState() : InitialTrainingState(nullptr) {}
  ~InitialTrainingState() override;
  explicit PROTOBUF_CONSTEXPR InitialTrainingState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitialTrainingState(const InitialTrainingState& from);
  InitialTrainingState(InitialTrainingState&& from) noexcept
    : InitialTrainingState() {
    *this = ::std::move(from);
  }

  inline InitialTrainingState& operator=(const InitialTrainingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialTrainingState& operator=(InitialTrainingState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitialTrainingState& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitialTrainingState* internal_default_instance() {
    return reinterpret_cast<const InitialTrainingState*>(
               &_InitialTrainingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InitialTrainingState& a, InitialTrainingState& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialTrainingState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialTrainingState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitialTrainingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitialTrainingState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitialTrainingState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitialTrainingState& from) {
    InitialTrainingState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialTrainingState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.InitialTrainingState";
  }
  protected:
  explicit InitialTrainingState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentStatesFieldNumber = 1,
  };
  // map<int32, .Schola.InitialEnvironmentState> environment_states = 1;
  int environment_states_size() const;
  private:
  int _internal_environment_states_size() const;
  public:
  void clear_environment_states();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialEnvironmentState >&
      _internal_environment_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialEnvironmentState >*
      _internal_mutable_environment_states();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialEnvironmentState >&
      environment_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialEnvironmentState >*
      mutable_environment_states();

  // @@protoc_insertion_point(class_scope:Schola.InitialTrainingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        InitialTrainingState_EnvironmentStatesEntry_DoNotUse,
        int32_t, ::Schola::InitialEnvironmentState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> environment_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_State_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AgentState

// .Schola.DictPoint observations = 1;
inline bool AgentState::_internal_has_observations() const {
  return this != internal_default_instance() && _impl_.observations_ != nullptr;
}
inline bool AgentState::has_observations() const {
  return _internal_has_observations();
}
inline const ::Schola::DictPoint& AgentState::_internal_observations() const {
  const ::Schola::DictPoint* p = _impl_.observations_;
  return p != nullptr ? *p : reinterpret_cast<const ::Schola::DictPoint&>(
      ::Schola::_DictPoint_default_instance_);
}
inline const ::Schola::DictPoint& AgentState::observations() const {
  // @@protoc_insertion_point(field_get:Schola.AgentState.observations)
  return _internal_observations();
}
inline void AgentState::unsafe_arena_set_allocated_observations(
    ::Schola::DictPoint* observations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observations_);
  }
  _impl_.observations_ = observations;
  if (observations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Schola.AgentState.observations)
}
inline ::Schola::DictPoint* AgentState::release_observations() {
  
  ::Schola::DictPoint* temp = _impl_.observations_;
  _impl_.observations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Schola::DictPoint* AgentState::unsafe_arena_release_observations() {
  // @@protoc_insertion_point(field_release:Schola.AgentState.observations)
  
  ::Schola::DictPoint* temp = _impl_.observations_;
  _impl_.observations_ = nullptr;
  return temp;
}
inline ::Schola::DictPoint* AgentState::_internal_mutable_observations() {
  
  if (_impl_.observations_ == nullptr) {
    auto* p = CreateMaybeMessage<::Schola::DictPoint>(GetArenaForAllocation());
    _impl_.observations_ = p;
  }
  return _impl_.observations_;
}
inline ::Schola::DictPoint* AgentState::mutable_observations() {
  ::Schola::DictPoint* _msg = _internal_mutable_observations();
  // @@protoc_insertion_point(field_mutable:Schola.AgentState.observations)
  return _msg;
}
inline void AgentState::set_allocated_observations(::Schola::DictPoint* observations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observations_);
  }
  if (observations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observations));
    if (message_arena != submessage_arena) {
      observations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observations, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observations_ = observations;
  // @@protoc_insertion_point(field_set_allocated:Schola.AgentState.observations)
}

// float reward = 2;
inline void AgentState::clear_reward() {
  _impl_.reward_ = 0;
}
inline float AgentState::_internal_reward() const {
  return _impl_.reward_;
}
inline float AgentState::reward() const {
  // @@protoc_insertion_point(field_get:Schola.AgentState.reward)
  return _internal_reward();
}
inline void AgentState::_internal_set_reward(float value) {
  
  _impl_.reward_ = value;
}
inline void AgentState::set_reward(float value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:Schola.AgentState.reward)
}

// .Schola.Status status = 3;
inline void AgentState::clear_status() {
  _impl_.status_ = 0;
}
inline ::Schola::Status AgentState::_internal_status() const {
  return static_cast< ::Schola::Status >(_impl_.status_);
}
inline ::Schola::Status AgentState::status() const {
  // @@protoc_insertion_point(field_get:Schola.AgentState.status)
  return _internal_status();
}
inline void AgentState::_internal_set_status(::Schola::Status value) {
  
  _impl_.status_ = value;
}
inline void AgentState::set_status(::Schola::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Schola.AgentState.status)
}

// map<string, string> info = 4;
inline int AgentState::_internal_info_size() const {
  return _impl_.info_.size();
}
inline int AgentState::info_size() const {
  return _internal_info_size();
}
inline void AgentState::clear_info() {
  _impl_.info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AgentState::_internal_info() const {
  return _impl_.info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AgentState::info() const {
  // @@protoc_insertion_point(field_map:Schola.AgentState.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AgentState::_internal_mutable_info() {
  return _impl_.info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AgentState::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:Schola.AgentState.info)
  return _internal_mutable_info();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EnvironmentState

// map<int32, .Schola.AgentState> agent_states = 1;
inline int EnvironmentState::_internal_agent_states_size() const {
  return _impl_.agent_states_.size();
}
inline int EnvironmentState::agent_states_size() const {
  return _internal_agent_states_size();
}
inline void EnvironmentState::clear_agent_states() {
  _impl_.agent_states_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::AgentState >&
EnvironmentState::_internal_agent_states() const {
  return _impl_.agent_states_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::AgentState >&
EnvironmentState::agent_states() const {
  // @@protoc_insertion_point(field_map:Schola.EnvironmentState.agent_states)
  return _internal_agent_states();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::AgentState >*
EnvironmentState::_internal_mutable_agent_states() {
  return _impl_.agent_states_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::AgentState >*
EnvironmentState::mutable_agent_states() {
  // @@protoc_insertion_point(field_mutable_map:Schola.EnvironmentState.agent_states)
  return _internal_mutable_agent_states();
}

// -------------------------------------------------------------------

// TrainingState

// repeated .Schola.EnvironmentState environment_states = 1;
inline int TrainingState::_internal_environment_states_size() const {
  return _impl_.environment_states_.size();
}
inline int TrainingState::environment_states_size() const {
  return _internal_environment_states_size();
}
inline void TrainingState::clear_environment_states() {
  _impl_.environment_states_.Clear();
}
inline ::Schola::EnvironmentState* TrainingState::mutable_environment_states(int index) {
  // @@protoc_insertion_point(field_mutable:Schola.TrainingState.environment_states)
  return _impl_.environment_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::EnvironmentState >*
TrainingState::mutable_environment_states() {
  // @@protoc_insertion_point(field_mutable_list:Schola.TrainingState.environment_states)
  return &_impl_.environment_states_;
}
inline const ::Schola::EnvironmentState& TrainingState::_internal_environment_states(int index) const {
  return _impl_.environment_states_.Get(index);
}
inline const ::Schola::EnvironmentState& TrainingState::environment_states(int index) const {
  // @@protoc_insertion_point(field_get:Schola.TrainingState.environment_states)
  return _internal_environment_states(index);
}
inline ::Schola::EnvironmentState* TrainingState::_internal_add_environment_states() {
  return _impl_.environment_states_.Add();
}
inline ::Schola::EnvironmentState* TrainingState::add_environment_states() {
  ::Schola::EnvironmentState* _add = _internal_add_environment_states();
  // @@protoc_insertion_point(field_add:Schola.TrainingState.environment_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::EnvironmentState >&
TrainingState::environment_states() const {
  // @@protoc_insertion_point(field_list:Schola.TrainingState.environment_states)
  return _impl_.environment_states_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InitialAgentState

// .Schola.DictPoint observations = 1;
inline bool InitialAgentState::_internal_has_observations() const {
  return this != internal_default_instance() && _impl_.observations_ != nullptr;
}
inline bool InitialAgentState::has_observations() const {
  return _internal_has_observations();
}
inline const ::Schola::DictPoint& InitialAgentState::_internal_observations() const {
  const ::Schola::DictPoint* p = _impl_.observations_;
  return p != nullptr ? *p : reinterpret_cast<const ::Schola::DictPoint&>(
      ::Schola::_DictPoint_default_instance_);
}
inline const ::Schola::DictPoint& InitialAgentState::observations() const {
  // @@protoc_insertion_point(field_get:Schola.InitialAgentState.observations)
  return _internal_observations();
}
inline void InitialAgentState::unsafe_arena_set_allocated_observations(
    ::Schola::DictPoint* observations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observations_);
  }
  _impl_.observations_ = observations;
  if (observations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Schola.InitialAgentState.observations)
}
inline ::Schola::DictPoint* InitialAgentState::release_observations() {
  
  ::Schola::DictPoint* temp = _impl_.observations_;
  _impl_.observations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Schola::DictPoint* InitialAgentState::unsafe_arena_release_observations() {
  // @@protoc_insertion_point(field_release:Schola.InitialAgentState.observations)
  
  ::Schola::DictPoint* temp = _impl_.observations_;
  _impl_.observations_ = nullptr;
  return temp;
}
inline ::Schola::DictPoint* InitialAgentState::_internal_mutable_observations() {
  
  if (_impl_.observations_ == nullptr) {
    auto* p = CreateMaybeMessage<::Schola::DictPoint>(GetArenaForAllocation());
    _impl_.observations_ = p;
  }
  return _impl_.observations_;
}
inline ::Schola::DictPoint* InitialAgentState::mutable_observations() {
  ::Schola::DictPoint* _msg = _internal_mutable_observations();
  // @@protoc_insertion_point(field_mutable:Schola.InitialAgentState.observations)
  return _msg;
}
inline void InitialAgentState::set_allocated_observations(::Schola::DictPoint* observations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observations_);
  }
  if (observations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observations));
    if (message_arena != submessage_arena) {
      observations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observations, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observations_ = observations;
  // @@protoc_insertion_point(field_set_allocated:Schola.InitialAgentState.observations)
}

// map<string, string> info = 4;
inline int InitialAgentState::_internal_info_size() const {
  return _impl_.info_.size();
}
inline int InitialAgentState::info_size() const {
  return _internal_info_size();
}
inline void InitialAgentState::clear_info() {
  _impl_.info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InitialAgentState::_internal_info() const {
  return _impl_.info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InitialAgentState::info() const {
  // @@protoc_insertion_point(field_map:Schola.InitialAgentState.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InitialAgentState::_internal_mutable_info() {
  return _impl_.info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InitialAgentState::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:Schola.InitialAgentState.info)
  return _internal_mutable_info();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InitialEnvironmentState

// map<int32, .Schola.InitialAgentState> agent_states = 1;
inline int InitialEnvironmentState::_internal_agent_states_size() const {
  return _impl_.agent_states_.size();
}
inline int InitialEnvironmentState::agent_states_size() const {
  return _internal_agent_states_size();
}
inline void InitialEnvironmentState::clear_agent_states() {
  _impl_.agent_states_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialAgentState >&
InitialEnvironmentState::_internal_agent_states() const {
  return _impl_.agent_states_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialAgentState >&
InitialEnvironmentState::agent_states() const {
  // @@protoc_insertion_point(field_map:Schola.InitialEnvironmentState.agent_states)
  return _internal_agent_states();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialAgentState >*
InitialEnvironmentState::_internal_mutable_agent_states() {
  return _impl_.agent_states_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialAgentState >*
InitialEnvironmentState::mutable_agent_states() {
  // @@protoc_insertion_point(field_mutable_map:Schola.InitialEnvironmentState.agent_states)
  return _internal_mutable_agent_states();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InitialTrainingState

// map<int32, .Schola.InitialEnvironmentState> environment_states = 1;
inline int InitialTrainingState::_internal_environment_states_size() const {
  return _impl_.environment_states_.size();
}
inline int InitialTrainingState::environment_states_size() const {
  return _internal_environment_states_size();
}
inline void InitialTrainingState::clear_environment_states() {
  _impl_.environment_states_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialEnvironmentState >&
InitialTrainingState::_internal_environment_states() const {
  return _impl_.environment_states_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialEnvironmentState >&
InitialTrainingState::environment_states() const {
  // @@protoc_insertion_point(field_map:Schola.InitialTrainingState.environment_states)
  return _internal_environment_states();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialEnvironmentState >*
InitialTrainingState::_internal_mutable_environment_states() {
  return _impl_.environment_states_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Schola::InitialEnvironmentState >*
InitialTrainingState::mutable_environment_states() {
  // @@protoc_insertion_point(field_mutable_map:Schola.InitialTrainingState.environment_states)
  return _internal_mutable_environment_states();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Schola

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Schola::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Schola::Status>() {
  return ::Schola::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_State_2eproto
