// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Points.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Points_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Points_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Points_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Points_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Points_2eproto;
namespace Schola {
class BinaryPoint;
struct BinaryPointDefaultTypeInternal;
extern BinaryPointDefaultTypeInternal _BinaryPoint_default_instance_;
class BoxPoint;
struct BoxPointDefaultTypeInternal;
extern BoxPointDefaultTypeInternal _BoxPoint_default_instance_;
class DictPoint;
struct DictPointDefaultTypeInternal;
extern DictPointDefaultTypeInternal _DictPoint_default_instance_;
class DiscretePoint;
struct DiscretePointDefaultTypeInternal;
extern DiscretePointDefaultTypeInternal _DiscretePoint_default_instance_;
class FundamentalPoint;
struct FundamentalPointDefaultTypeInternal;
extern FundamentalPointDefaultTypeInternal _FundamentalPoint_default_instance_;
}  // namespace Schola
PROTOBUF_NAMESPACE_OPEN
template<> ::Schola::BinaryPoint* Arena::CreateMaybeMessage<::Schola::BinaryPoint>(Arena*);
template<> ::Schola::BoxPoint* Arena::CreateMaybeMessage<::Schola::BoxPoint>(Arena*);
template<> ::Schola::DictPoint* Arena::CreateMaybeMessage<::Schola::DictPoint>(Arena*);
template<> ::Schola::DiscretePoint* Arena::CreateMaybeMessage<::Schola::DiscretePoint>(Arena*);
template<> ::Schola::FundamentalPoint* Arena::CreateMaybeMessage<::Schola::FundamentalPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Schola {

// ===================================================================

class BoxPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.BoxPoint) */ {
 public:
  inline BoxPoint() : BoxPoint(nullptr) {}
  ~BoxPoint() override;
  explicit PROTOBUF_CONSTEXPR BoxPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxPoint(const BoxPoint& from);
  BoxPoint(BoxPoint&& from) noexcept
    : BoxPoint() {
    *this = ::std::move(from);
  }

  inline BoxPoint& operator=(const BoxPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxPoint& operator=(BoxPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxPoint* internal_default_instance() {
    return reinterpret_cast<const BoxPoint*>(
               &_BoxPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoxPoint& a, BoxPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoxPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoxPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoxPoint& from) {
    BoxPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.BoxPoint";
  }
  protected:
  explicit BoxPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Schola.BoxPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Points_2eproto;
};
// -------------------------------------------------------------------

class DiscretePoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.DiscretePoint) */ {
 public:
  inline DiscretePoint() : DiscretePoint(nullptr) {}
  ~DiscretePoint() override;
  explicit PROTOBUF_CONSTEXPR DiscretePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscretePoint(const DiscretePoint& from);
  DiscretePoint(DiscretePoint&& from) noexcept
    : DiscretePoint() {
    *this = ::std::move(from);
  }

  inline DiscretePoint& operator=(const DiscretePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscretePoint& operator=(DiscretePoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscretePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscretePoint* internal_default_instance() {
    return reinterpret_cast<const DiscretePoint*>(
               &_DiscretePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DiscretePoint& a, DiscretePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscretePoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscretePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscretePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscretePoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscretePoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscretePoint& from) {
    DiscretePoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscretePoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.DiscretePoint";
  }
  protected:
  explicit DiscretePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  int32_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_values() const;
  void _internal_add_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_values();
  public:
  int32_t values(int index) const;
  void set_values(int index, int32_t value);
  void add_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Schola.DiscretePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > values_;
    mutable std::atomic<int> _values_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Points_2eproto;
};
// -------------------------------------------------------------------

class BinaryPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.BinaryPoint) */ {
 public:
  inline BinaryPoint() : BinaryPoint(nullptr) {}
  ~BinaryPoint() override;
  explicit PROTOBUF_CONSTEXPR BinaryPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryPoint(const BinaryPoint& from);
  BinaryPoint(BinaryPoint&& from) noexcept
    : BinaryPoint() {
    *this = ::std::move(from);
  }

  inline BinaryPoint& operator=(const BinaryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryPoint& operator=(BinaryPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryPoint* internal_default_instance() {
    return reinterpret_cast<const BinaryPoint*>(
               &_BinaryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BinaryPoint& a, BinaryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinaryPoint& from) {
    BinaryPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.BinaryPoint";
  }
  protected:
  explicit BinaryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bool values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  bool _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_values() const;
  void _internal_add_values(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_values();
  public:
  bool values(int index) const;
  void set_values(int index, bool value);
  void add_values(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Schola.BinaryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Points_2eproto;
};
// -------------------------------------------------------------------

class FundamentalPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.FundamentalPoint) */ {
 public:
  inline FundamentalPoint() : FundamentalPoint(nullptr) {}
  ~FundamentalPoint() override;
  explicit PROTOBUF_CONSTEXPR FundamentalPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FundamentalPoint(const FundamentalPoint& from);
  FundamentalPoint(FundamentalPoint&& from) noexcept
    : FundamentalPoint() {
    *this = ::std::move(from);
  }

  inline FundamentalPoint& operator=(const FundamentalPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundamentalPoint& operator=(FundamentalPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FundamentalPoint& default_instance() {
    return *internal_default_instance();
  }
  enum PointCase {
    kBoxPoint = 1,
    kDiscretePoint = 2,
    kBinaryPoint = 3,
    POINT_NOT_SET = 0,
  };

  static inline const FundamentalPoint* internal_default_instance() {
    return reinterpret_cast<const FundamentalPoint*>(
               &_FundamentalPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FundamentalPoint& a, FundamentalPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(FundamentalPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FundamentalPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FundamentalPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FundamentalPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FundamentalPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FundamentalPoint& from) {
    FundamentalPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundamentalPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.FundamentalPoint";
  }
  protected:
  explicit FundamentalPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxPointFieldNumber = 1,
    kDiscretePointFieldNumber = 2,
    kBinaryPointFieldNumber = 3,
  };
  // .Schola.BoxPoint box_point = 1;
  bool has_box_point() const;
  private:
  bool _internal_has_box_point() const;
  public:
  void clear_box_point();
  const ::Schola::BoxPoint& box_point() const;
  PROTOBUF_NODISCARD ::Schola::BoxPoint* release_box_point();
  ::Schola::BoxPoint* mutable_box_point();
  void set_allocated_box_point(::Schola::BoxPoint* box_point);
  private:
  const ::Schola::BoxPoint& _internal_box_point() const;
  ::Schola::BoxPoint* _internal_mutable_box_point();
  public:
  void unsafe_arena_set_allocated_box_point(
      ::Schola::BoxPoint* box_point);
  ::Schola::BoxPoint* unsafe_arena_release_box_point();

  // .Schola.DiscretePoint discrete_point = 2;
  bool has_discrete_point() const;
  private:
  bool _internal_has_discrete_point() const;
  public:
  void clear_discrete_point();
  const ::Schola::DiscretePoint& discrete_point() const;
  PROTOBUF_NODISCARD ::Schola::DiscretePoint* release_discrete_point();
  ::Schola::DiscretePoint* mutable_discrete_point();
  void set_allocated_discrete_point(::Schola::DiscretePoint* discrete_point);
  private:
  const ::Schola::DiscretePoint& _internal_discrete_point() const;
  ::Schola::DiscretePoint* _internal_mutable_discrete_point();
  public:
  void unsafe_arena_set_allocated_discrete_point(
      ::Schola::DiscretePoint* discrete_point);
  ::Schola::DiscretePoint* unsafe_arena_release_discrete_point();

  // .Schola.BinaryPoint binary_point = 3;
  bool has_binary_point() const;
  private:
  bool _internal_has_binary_point() const;
  public:
  void clear_binary_point();
  const ::Schola::BinaryPoint& binary_point() const;
  PROTOBUF_NODISCARD ::Schola::BinaryPoint* release_binary_point();
  ::Schola::BinaryPoint* mutable_binary_point();
  void set_allocated_binary_point(::Schola::BinaryPoint* binary_point);
  private:
  const ::Schola::BinaryPoint& _internal_binary_point() const;
  ::Schola::BinaryPoint* _internal_mutable_binary_point();
  public:
  void unsafe_arena_set_allocated_binary_point(
      ::Schola::BinaryPoint* binary_point);
  ::Schola::BinaryPoint* unsafe_arena_release_binary_point();

  void clear_point();
  PointCase point_case() const;
  // @@protoc_insertion_point(class_scope:Schola.FundamentalPoint)
 private:
  class _Internal;
  void set_has_box_point();
  void set_has_discrete_point();
  void set_has_binary_point();

  inline bool has_point() const;
  inline void clear_has_point();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PointUnion {
      constexpr PointUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Schola::BoxPoint* box_point_;
      ::Schola::DiscretePoint* discrete_point_;
      ::Schola::BinaryPoint* binary_point_;
    } point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Points_2eproto;
};
// -------------------------------------------------------------------

class DictPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.DictPoint) */ {
 public:
  inline DictPoint() : DictPoint(nullptr) {}
  ~DictPoint() override;
  explicit PROTOBUF_CONSTEXPR DictPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DictPoint(const DictPoint& from);
  DictPoint(DictPoint&& from) noexcept
    : DictPoint() {
    *this = ::std::move(from);
  }

  inline DictPoint& operator=(const DictPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictPoint& operator=(DictPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DictPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const DictPoint* internal_default_instance() {
    return reinterpret_cast<const DictPoint*>(
               &_DictPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DictPoint& a, DictPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DictPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DictPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DictPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DictPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DictPoint& from) {
    DictPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.DictPoint";
  }
  protected:
  explicit DictPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .Schola.FundamentalPoint values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Schola::FundamentalPoint* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalPoint >*
      mutable_values();
  private:
  const ::Schola::FundamentalPoint& _internal_values(int index) const;
  ::Schola::FundamentalPoint* _internal_add_values();
  public:
  const ::Schola::FundamentalPoint& values(int index) const;
  ::Schola::FundamentalPoint* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalPoint >&
      values() const;

  // @@protoc_insertion_point(class_scope:Schola.DictPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalPoint > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Points_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoxPoint

// repeated float values = 1;
inline int BoxPoint::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int BoxPoint::values_size() const {
  return _internal_values_size();
}
inline void BoxPoint::clear_values() {
  _impl_.values_.Clear();
}
inline float BoxPoint::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float BoxPoint::values(int index) const {
  // @@protoc_insertion_point(field_get:Schola.BoxPoint.values)
  return _internal_values(index);
}
inline void BoxPoint::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Schola.BoxPoint.values)
}
inline void BoxPoint::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void BoxPoint::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Schola.BoxPoint.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BoxPoint::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BoxPoint::values() const {
  // @@protoc_insertion_point(field_list:Schola.BoxPoint.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BoxPoint::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BoxPoint::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Schola.BoxPoint.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// DiscretePoint

// repeated int32 values = 1;
inline int DiscretePoint::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int DiscretePoint::values_size() const {
  return _internal_values_size();
}
inline void DiscretePoint::clear_values() {
  _impl_.values_.Clear();
}
inline int32_t DiscretePoint::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline int32_t DiscretePoint::values(int index) const {
  // @@protoc_insertion_point(field_get:Schola.DiscretePoint.values)
  return _internal_values(index);
}
inline void DiscretePoint::set_values(int index, int32_t value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Schola.DiscretePoint.values)
}
inline void DiscretePoint::_internal_add_values(int32_t value) {
  _impl_.values_.Add(value);
}
inline void DiscretePoint::add_values(int32_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Schola.DiscretePoint.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DiscretePoint::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DiscretePoint::values() const {
  // @@protoc_insertion_point(field_list:Schola.DiscretePoint.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DiscretePoint::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DiscretePoint::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Schola.DiscretePoint.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// BinaryPoint

// repeated bool values = 1;
inline int BinaryPoint::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int BinaryPoint::values_size() const {
  return _internal_values_size();
}
inline void BinaryPoint::clear_values() {
  _impl_.values_.Clear();
}
inline bool BinaryPoint::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline bool BinaryPoint::values(int index) const {
  // @@protoc_insertion_point(field_get:Schola.BinaryPoint.values)
  return _internal_values(index);
}
inline void BinaryPoint::set_values(int index, bool value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Schola.BinaryPoint.values)
}
inline void BinaryPoint::_internal_add_values(bool value) {
  _impl_.values_.Add(value);
}
inline void BinaryPoint::add_values(bool value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Schola.BinaryPoint.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BinaryPoint::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BinaryPoint::values() const {
  // @@protoc_insertion_point(field_list:Schola.BinaryPoint.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BinaryPoint::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BinaryPoint::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Schola.BinaryPoint.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// FundamentalPoint

// .Schola.BoxPoint box_point = 1;
inline bool FundamentalPoint::_internal_has_box_point() const {
  return point_case() == kBoxPoint;
}
inline bool FundamentalPoint::has_box_point() const {
  return _internal_has_box_point();
}
inline void FundamentalPoint::set_has_box_point() {
  _impl_._oneof_case_[0] = kBoxPoint;
}
inline void FundamentalPoint::clear_box_point() {
  if (_internal_has_box_point()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.point_.box_point_;
    }
    clear_has_point();
  }
}
inline ::Schola::BoxPoint* FundamentalPoint::release_box_point() {
  // @@protoc_insertion_point(field_release:Schola.FundamentalPoint.box_point)
  if (_internal_has_box_point()) {
    clear_has_point();
    ::Schola::BoxPoint* temp = _impl_.point_.box_point_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.point_.box_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Schola::BoxPoint& FundamentalPoint::_internal_box_point() const {
  return _internal_has_box_point()
      ? *_impl_.point_.box_point_
      : reinterpret_cast< ::Schola::BoxPoint&>(::Schola::_BoxPoint_default_instance_);
}
inline const ::Schola::BoxPoint& FundamentalPoint::box_point() const {
  // @@protoc_insertion_point(field_get:Schola.FundamentalPoint.box_point)
  return _internal_box_point();
}
inline ::Schola::BoxPoint* FundamentalPoint::unsafe_arena_release_box_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Schola.FundamentalPoint.box_point)
  if (_internal_has_box_point()) {
    clear_has_point();
    ::Schola::BoxPoint* temp = _impl_.point_.box_point_;
    _impl_.point_.box_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FundamentalPoint::unsafe_arena_set_allocated_box_point(::Schola::BoxPoint* box_point) {
  clear_point();
  if (box_point) {
    set_has_box_point();
    _impl_.point_.box_point_ = box_point;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Schola.FundamentalPoint.box_point)
}
inline ::Schola::BoxPoint* FundamentalPoint::_internal_mutable_box_point() {
  if (!_internal_has_box_point()) {
    clear_point();
    set_has_box_point();
    _impl_.point_.box_point_ = CreateMaybeMessage< ::Schola::BoxPoint >(GetArenaForAllocation());
  }
  return _impl_.point_.box_point_;
}
inline ::Schola::BoxPoint* FundamentalPoint::mutable_box_point() {
  ::Schola::BoxPoint* _msg = _internal_mutable_box_point();
  // @@protoc_insertion_point(field_mutable:Schola.FundamentalPoint.box_point)
  return _msg;
}

// .Schola.DiscretePoint discrete_point = 2;
inline bool FundamentalPoint::_internal_has_discrete_point() const {
  return point_case() == kDiscretePoint;
}
inline bool FundamentalPoint::has_discrete_point() const {
  return _internal_has_discrete_point();
}
inline void FundamentalPoint::set_has_discrete_point() {
  _impl_._oneof_case_[0] = kDiscretePoint;
}
inline void FundamentalPoint::clear_discrete_point() {
  if (_internal_has_discrete_point()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.point_.discrete_point_;
    }
    clear_has_point();
  }
}
inline ::Schola::DiscretePoint* FundamentalPoint::release_discrete_point() {
  // @@protoc_insertion_point(field_release:Schola.FundamentalPoint.discrete_point)
  if (_internal_has_discrete_point()) {
    clear_has_point();
    ::Schola::DiscretePoint* temp = _impl_.point_.discrete_point_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.point_.discrete_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Schola::DiscretePoint& FundamentalPoint::_internal_discrete_point() const {
  return _internal_has_discrete_point()
      ? *_impl_.point_.discrete_point_
      : reinterpret_cast< ::Schola::DiscretePoint&>(::Schola::_DiscretePoint_default_instance_);
}
inline const ::Schola::DiscretePoint& FundamentalPoint::discrete_point() const {
  // @@protoc_insertion_point(field_get:Schola.FundamentalPoint.discrete_point)
  return _internal_discrete_point();
}
inline ::Schola::DiscretePoint* FundamentalPoint::unsafe_arena_release_discrete_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Schola.FundamentalPoint.discrete_point)
  if (_internal_has_discrete_point()) {
    clear_has_point();
    ::Schola::DiscretePoint* temp = _impl_.point_.discrete_point_;
    _impl_.point_.discrete_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FundamentalPoint::unsafe_arena_set_allocated_discrete_point(::Schola::DiscretePoint* discrete_point) {
  clear_point();
  if (discrete_point) {
    set_has_discrete_point();
    _impl_.point_.discrete_point_ = discrete_point;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Schola.FundamentalPoint.discrete_point)
}
inline ::Schola::DiscretePoint* FundamentalPoint::_internal_mutable_discrete_point() {
  if (!_internal_has_discrete_point()) {
    clear_point();
    set_has_discrete_point();
    _impl_.point_.discrete_point_ = CreateMaybeMessage< ::Schola::DiscretePoint >(GetArenaForAllocation());
  }
  return _impl_.point_.discrete_point_;
}
inline ::Schola::DiscretePoint* FundamentalPoint::mutable_discrete_point() {
  ::Schola::DiscretePoint* _msg = _internal_mutable_discrete_point();
  // @@protoc_insertion_point(field_mutable:Schola.FundamentalPoint.discrete_point)
  return _msg;
}

// .Schola.BinaryPoint binary_point = 3;
inline bool FundamentalPoint::_internal_has_binary_point() const {
  return point_case() == kBinaryPoint;
}
inline bool FundamentalPoint::has_binary_point() const {
  return _internal_has_binary_point();
}
inline void FundamentalPoint::set_has_binary_point() {
  _impl_._oneof_case_[0] = kBinaryPoint;
}
inline void FundamentalPoint::clear_binary_point() {
  if (_internal_has_binary_point()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.point_.binary_point_;
    }
    clear_has_point();
  }
}
inline ::Schola::BinaryPoint* FundamentalPoint::release_binary_point() {
  // @@protoc_insertion_point(field_release:Schola.FundamentalPoint.binary_point)
  if (_internal_has_binary_point()) {
    clear_has_point();
    ::Schola::BinaryPoint* temp = _impl_.point_.binary_point_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.point_.binary_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Schola::BinaryPoint& FundamentalPoint::_internal_binary_point() const {
  return _internal_has_binary_point()
      ? *_impl_.point_.binary_point_
      : reinterpret_cast< ::Schola::BinaryPoint&>(::Schola::_BinaryPoint_default_instance_);
}
inline const ::Schola::BinaryPoint& FundamentalPoint::binary_point() const {
  // @@protoc_insertion_point(field_get:Schola.FundamentalPoint.binary_point)
  return _internal_binary_point();
}
inline ::Schola::BinaryPoint* FundamentalPoint::unsafe_arena_release_binary_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Schola.FundamentalPoint.binary_point)
  if (_internal_has_binary_point()) {
    clear_has_point();
    ::Schola::BinaryPoint* temp = _impl_.point_.binary_point_;
    _impl_.point_.binary_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FundamentalPoint::unsafe_arena_set_allocated_binary_point(::Schola::BinaryPoint* binary_point) {
  clear_point();
  if (binary_point) {
    set_has_binary_point();
    _impl_.point_.binary_point_ = binary_point;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Schola.FundamentalPoint.binary_point)
}
inline ::Schola::BinaryPoint* FundamentalPoint::_internal_mutable_binary_point() {
  if (!_internal_has_binary_point()) {
    clear_point();
    set_has_binary_point();
    _impl_.point_.binary_point_ = CreateMaybeMessage< ::Schola::BinaryPoint >(GetArenaForAllocation());
  }
  return _impl_.point_.binary_point_;
}
inline ::Schola::BinaryPoint* FundamentalPoint::mutable_binary_point() {
  ::Schola::BinaryPoint* _msg = _internal_mutable_binary_point();
  // @@protoc_insertion_point(field_mutable:Schola.FundamentalPoint.binary_point)
  return _msg;
}

inline bool FundamentalPoint::has_point() const {
  return point_case() != POINT_NOT_SET;
}
inline void FundamentalPoint::clear_has_point() {
  _impl_._oneof_case_[0] = POINT_NOT_SET;
}
inline FundamentalPoint::PointCase FundamentalPoint::point_case() const {
  return FundamentalPoint::PointCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DictPoint

// repeated .Schola.FundamentalPoint values = 1;
inline int DictPoint::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int DictPoint::values_size() const {
  return _internal_values_size();
}
inline void DictPoint::clear_values() {
  _impl_.values_.Clear();
}
inline ::Schola::FundamentalPoint* DictPoint::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Schola.DictPoint.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalPoint >*
DictPoint::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Schola.DictPoint.values)
  return &_impl_.values_;
}
inline const ::Schola::FundamentalPoint& DictPoint::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::Schola::FundamentalPoint& DictPoint::values(int index) const {
  // @@protoc_insertion_point(field_get:Schola.DictPoint.values)
  return _internal_values(index);
}
inline ::Schola::FundamentalPoint* DictPoint::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::Schola::FundamentalPoint* DictPoint::add_values() {
  ::Schola::FundamentalPoint* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:Schola.DictPoint.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalPoint >&
DictPoint::values() const {
  // @@protoc_insertion_point(field_list:Schola.DictPoint.values)
  return _impl_.values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Schola

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Points_2eproto
