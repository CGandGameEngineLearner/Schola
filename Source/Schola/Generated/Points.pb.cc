// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Points.proto

#pragma warning (disable : 4800)
#pragma warning (disable : 4125)
#include "Points.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Schola {
PROTOBUF_CONSTEXPR BoxPoint::BoxPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoxPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoxPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoxPointDefaultTypeInternal() {}
  union {
    BoxPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoxPointDefaultTypeInternal _BoxPoint_default_instance_;
PROTOBUF_CONSTEXPR DiscretePoint::DiscretePoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DiscretePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscretePointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscretePointDefaultTypeInternal() {}
  union {
    DiscretePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscretePointDefaultTypeInternal _DiscretePoint_default_instance_;
PROTOBUF_CONSTEXPR BinaryPoint::BinaryPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryPointDefaultTypeInternal() {}
  union {
    BinaryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryPointDefaultTypeInternal _BinaryPoint_default_instance_;
PROTOBUF_CONSTEXPR FundamentalPoint::FundamentalPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FundamentalPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundamentalPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundamentalPointDefaultTypeInternal() {}
  union {
    FundamentalPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundamentalPointDefaultTypeInternal _FundamentalPoint_default_instance_;
PROTOBUF_CONSTEXPR DictPoint::DictPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DictPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DictPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DictPointDefaultTypeInternal() {}
  union {
    DictPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DictPointDefaultTypeInternal _DictPoint_default_instance_;
}  // namespace Schola
static ::_pb::Metadata file_level_metadata_Points_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Points_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Points_2eproto = nullptr;

const uint32_t TableStruct_Points_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::BoxPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::BoxPoint, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::DiscretePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::DiscretePoint, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::BinaryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::BinaryPoint, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::FundamentalPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Schola::FundamentalPoint, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Schola::FundamentalPoint, _impl_.point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Schola::DictPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Schola::DictPoint, _impl_.values_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Schola::BoxPoint)},
  { 7, -1, -1, sizeof(::Schola::DiscretePoint)},
  { 14, -1, -1, sizeof(::Schola::BinaryPoint)},
  { 21, -1, -1, sizeof(::Schola::FundamentalPoint)},
  { 31, -1, -1, sizeof(::Schola::DictPoint)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Schola::_BoxPoint_default_instance_._instance,
  &::Schola::_DiscretePoint_default_instance_._instance,
  &::Schola::_BinaryPoint_default_instance_._instance,
  &::Schola::_FundamentalPoint_default_instance_._instance,
  &::Schola::_DictPoint_default_instance_._instance,
};

const char descriptor_table_protodef_Points_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Points.proto\022\006Schola\"\032\n\010BoxPoint\022\016\n\006va"
  "lues\030\001 \003(\002\"\037\n\rDiscretePoint\022\016\n\006values\030\001 "
  "\003(\005\"\035\n\013BinaryPoint\022\016\n\006values\030\001 \003(\010\"\240\001\n\020F"
  "undamentalPoint\022%\n\tbox_point\030\001 \001(\0132\020.Sch"
  "ola.BoxPointH\000\022/\n\016discrete_point\030\002 \001(\0132\025"
  ".Schola.DiscretePointH\000\022+\n\014binary_point\030"
  "\003 \001(\0132\023.Schola.BinaryPointH\000B\007\n\005point\"5\n"
  "\tDictPoint\022(\n\006values\030\001 \003(\0132\030.Schola.Fund"
  "amentalPointb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Points_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Points_2eproto = {
    false, false, 340, descriptor_table_protodef_Points_2eproto,
    "Points.proto",
    &descriptor_table_Points_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_Points_2eproto::offsets,
    file_level_metadata_Points_2eproto, file_level_enum_descriptors_Points_2eproto,
    file_level_service_descriptors_Points_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Points_2eproto_getter() {
  return &descriptor_table_Points_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Points_2eproto(&descriptor_table_Points_2eproto);
namespace Schola {

// ===================================================================

class BoxPoint::_Internal {
 public:
};

BoxPoint::BoxPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.BoxPoint)
}
BoxPoint::BoxPoint(const BoxPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoxPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Schola.BoxPoint)
}

inline void BoxPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoxPoint::~BoxPoint() {
  // @@protoc_insertion_point(destructor:Schola.BoxPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoxPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void BoxPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoxPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.BoxPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoxPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.BoxPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.BoxPoint)
  return target;
}

size_t BoxPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.BoxPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoxPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoxPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoxPoint::GetClassData() const { return &_class_data_; }


void BoxPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoxPoint*>(&to_msg);
  auto& from = static_cast<const BoxPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.BoxPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoxPoint::CopyFrom(const BoxPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.BoxPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxPoint::IsInitialized() const {
  return true;
}

void BoxPoint::InternalSwap(BoxPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Points_2eproto_getter, &descriptor_table_Points_2eproto_once,
      file_level_metadata_Points_2eproto[0]);
}

// ===================================================================

class DiscretePoint::_Internal {
 public:
};

DiscretePoint::DiscretePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.DiscretePoint)
}
DiscretePoint::DiscretePoint(const DiscretePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DiscretePoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Schola.DiscretePoint)
}

inline void DiscretePoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DiscretePoint::~DiscretePoint() {
  // @@protoc_insertion_point(destructor:Schola.DiscretePoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscretePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void DiscretePoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DiscretePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.DiscretePoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscretePoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscretePoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.DiscretePoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 values = 1;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.DiscretePoint)
  return target;
}

size_t DiscretePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.DiscretePoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 values = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscretePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DiscretePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscretePoint::GetClassData() const { return &_class_data_; }


void DiscretePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DiscretePoint*>(&to_msg);
  auto& from = static_cast<const DiscretePoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.DiscretePoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscretePoint::CopyFrom(const DiscretePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.DiscretePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscretePoint::IsInitialized() const {
  return true;
}

void DiscretePoint::InternalSwap(DiscretePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscretePoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Points_2eproto_getter, &descriptor_table_Points_2eproto_once,
      file_level_metadata_Points_2eproto[1]);
}

// ===================================================================

class BinaryPoint::_Internal {
 public:
};

BinaryPoint::BinaryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.BinaryPoint)
}
BinaryPoint::BinaryPoint(const BinaryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Schola.BinaryPoint)
}

inline void BinaryPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BinaryPoint::~BinaryPoint() {
  // @@protoc_insertion_point(destructor:Schola.BinaryPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void BinaryPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.BinaryPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.BinaryPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.BinaryPoint)
  return target;
}

size_t BinaryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.BinaryPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryPoint::GetClassData() const { return &_class_data_; }


void BinaryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryPoint*>(&to_msg);
  auto& from = static_cast<const BinaryPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.BinaryPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryPoint::CopyFrom(const BinaryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.BinaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryPoint::IsInitialized() const {
  return true;
}

void BinaryPoint::InternalSwap(BinaryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Points_2eproto_getter, &descriptor_table_Points_2eproto_once,
      file_level_metadata_Points_2eproto[2]);
}

// ===================================================================

class FundamentalPoint::_Internal {
 public:
  static const ::Schola::BoxPoint& box_point(const FundamentalPoint* msg);
  static const ::Schola::DiscretePoint& discrete_point(const FundamentalPoint* msg);
  static const ::Schola::BinaryPoint& binary_point(const FundamentalPoint* msg);
};

const ::Schola::BoxPoint&
FundamentalPoint::_Internal::box_point(const FundamentalPoint* msg) {
  return *msg->_impl_.point_.box_point_;
}
const ::Schola::DiscretePoint&
FundamentalPoint::_Internal::discrete_point(const FundamentalPoint* msg) {
  return *msg->_impl_.point_.discrete_point_;
}
const ::Schola::BinaryPoint&
FundamentalPoint::_Internal::binary_point(const FundamentalPoint* msg) {
  return *msg->_impl_.point_.binary_point_;
}
void FundamentalPoint::set_allocated_box_point(::Schola::BoxPoint* box_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_point();
  if (box_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box_point);
    if (message_arena != submessage_arena) {
      box_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box_point, submessage_arena);
    }
    set_has_box_point();
    _impl_.point_.box_point_ = box_point;
  }
  // @@protoc_insertion_point(field_set_allocated:Schola.FundamentalPoint.box_point)
}
void FundamentalPoint::set_allocated_discrete_point(::Schola::DiscretePoint* discrete_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_point();
  if (discrete_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(discrete_point);
    if (message_arena != submessage_arena) {
      discrete_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discrete_point, submessage_arena);
    }
    set_has_discrete_point();
    _impl_.point_.discrete_point_ = discrete_point;
  }
  // @@protoc_insertion_point(field_set_allocated:Schola.FundamentalPoint.discrete_point)
}
void FundamentalPoint::set_allocated_binary_point(::Schola::BinaryPoint* binary_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_point();
  if (binary_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(binary_point);
    if (message_arena != submessage_arena) {
      binary_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_point, submessage_arena);
    }
    set_has_binary_point();
    _impl_.point_.binary_point_ = binary_point;
  }
  // @@protoc_insertion_point(field_set_allocated:Schola.FundamentalPoint.binary_point)
}
FundamentalPoint::FundamentalPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.FundamentalPoint)
}
FundamentalPoint::FundamentalPoint(const FundamentalPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundamentalPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_point();
  switch (from.point_case()) {
    case kBoxPoint: {
      _this->_internal_mutable_box_point()->::Schola::BoxPoint::MergeFrom(
          from._internal_box_point());
      break;
    }
    case kDiscretePoint: {
      _this->_internal_mutable_discrete_point()->::Schola::DiscretePoint::MergeFrom(
          from._internal_discrete_point());
      break;
    }
    case kBinaryPoint: {
      _this->_internal_mutable_binary_point()->::Schola::BinaryPoint::MergeFrom(
          from._internal_binary_point());
      break;
    }
    case POINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Schola.FundamentalPoint)
}

inline void FundamentalPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_point();
}

FundamentalPoint::~FundamentalPoint() {
  // @@protoc_insertion_point(destructor:Schola.FundamentalPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundamentalPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_point()) {
    clear_point();
  }
}

void FundamentalPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundamentalPoint::clear_point() {
// @@protoc_insertion_point(one_of_clear_start:Schola.FundamentalPoint)
  switch (point_case()) {
    case kBoxPoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.point_.box_point_;
      }
      break;
    }
    case kDiscretePoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.point_.discrete_point_;
      }
      break;
    }
    case kBinaryPoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.point_.binary_point_;
      }
      break;
    }
    case POINT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = POINT_NOT_SET;
}


void FundamentalPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.FundamentalPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_point();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundamentalPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Schola.BoxPoint box_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Schola.DiscretePoint discrete_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_discrete_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Schola.BinaryPoint binary_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FundamentalPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.FundamentalPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Schola.BoxPoint box_point = 1;
  if (_internal_has_box_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::box_point(this),
        _Internal::box_point(this).GetCachedSize(), target, stream);
  }

  // .Schola.DiscretePoint discrete_point = 2;
  if (_internal_has_discrete_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::discrete_point(this),
        _Internal::discrete_point(this).GetCachedSize(), target, stream);
  }

  // .Schola.BinaryPoint binary_point = 3;
  if (_internal_has_binary_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::binary_point(this),
        _Internal::binary_point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.FundamentalPoint)
  return target;
}

size_t FundamentalPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.FundamentalPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (point_case()) {
    // .Schola.BoxPoint box_point = 1;
    case kBoxPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.point_.box_point_);
      break;
    }
    // .Schola.DiscretePoint discrete_point = 2;
    case kDiscretePoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.point_.discrete_point_);
      break;
    }
    // .Schola.BinaryPoint binary_point = 3;
    case kBinaryPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.point_.binary_point_);
      break;
    }
    case POINT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundamentalPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundamentalPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundamentalPoint::GetClassData() const { return &_class_data_; }


void FundamentalPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundamentalPoint*>(&to_msg);
  auto& from = static_cast<const FundamentalPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.FundamentalPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.point_case()) {
    case kBoxPoint: {
      _this->_internal_mutable_box_point()->::Schola::BoxPoint::MergeFrom(
          from._internal_box_point());
      break;
    }
    case kDiscretePoint: {
      _this->_internal_mutable_discrete_point()->::Schola::DiscretePoint::MergeFrom(
          from._internal_discrete_point());
      break;
    }
    case kBinaryPoint: {
      _this->_internal_mutable_binary_point()->::Schola::BinaryPoint::MergeFrom(
          from._internal_binary_point());
      break;
    }
    case POINT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundamentalPoint::CopyFrom(const FundamentalPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.FundamentalPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundamentalPoint::IsInitialized() const {
  return true;
}

void FundamentalPoint::InternalSwap(FundamentalPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.point_, other->_impl_.point_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundamentalPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Points_2eproto_getter, &descriptor_table_Points_2eproto_once,
      file_level_metadata_Points_2eproto[3]);
}

// ===================================================================

class DictPoint::_Internal {
 public:
};

DictPoint::DictPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Schola.DictPoint)
}
DictPoint::DictPoint(const DictPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DictPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Schola.DictPoint)
}

inline void DictPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DictPoint::~DictPoint() {
  // @@protoc_insertion_point(destructor:Schola.DictPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DictPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void DictPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DictPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Schola.DictPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Schola.FundamentalPoint values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DictPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Schola.DictPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Schola.FundamentalPoint values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schola.DictPoint)
  return target;
}

size_t DictPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schola.DictPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Schola.FundamentalPoint values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DictPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DictPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DictPoint::GetClassData() const { return &_class_data_; }


void DictPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DictPoint*>(&to_msg);
  auto& from = static_cast<const DictPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Schola.DictPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DictPoint::CopyFrom(const DictPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schola.DictPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictPoint::IsInitialized() const {
  return true;
}

void DictPoint::InternalSwap(DictPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Points_2eproto_getter, &descriptor_table_Points_2eproto_once,
      file_level_metadata_Points_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Schola
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Schola::BoxPoint*
Arena::CreateMaybeMessage< ::Schola::BoxPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::BoxPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::DiscretePoint*
Arena::CreateMaybeMessage< ::Schola::DiscretePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::DiscretePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::BinaryPoint*
Arena::CreateMaybeMessage< ::Schola::BinaryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::BinaryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::FundamentalPoint*
Arena::CreateMaybeMessage< ::Schola::FundamentalPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::FundamentalPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Schola::DictPoint*
Arena::CreateMaybeMessage< ::Schola::DictPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Schola::DictPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
