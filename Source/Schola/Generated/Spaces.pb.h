// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Spaces.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Spaces_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Spaces_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Spaces_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Spaces_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Spaces_2eproto;
namespace Schola {
class BinarySpace;
struct BinarySpaceDefaultTypeInternal;
extern BinarySpaceDefaultTypeInternal _BinarySpace_default_instance_;
class BoxSpace;
struct BoxSpaceDefaultTypeInternal;
extern BoxSpaceDefaultTypeInternal _BoxSpace_default_instance_;
class BoxSpace_BoxSpaceDimension;
struct BoxSpace_BoxSpaceDimensionDefaultTypeInternal;
extern BoxSpace_BoxSpaceDimensionDefaultTypeInternal _BoxSpace_BoxSpaceDimension_default_instance_;
class DictSpace;
struct DictSpaceDefaultTypeInternal;
extern DictSpaceDefaultTypeInternal _DictSpace_default_instance_;
class DiscreteSpace;
struct DiscreteSpaceDefaultTypeInternal;
extern DiscreteSpaceDefaultTypeInternal _DiscreteSpace_default_instance_;
class FundamentalSpace;
struct FundamentalSpaceDefaultTypeInternal;
extern FundamentalSpaceDefaultTypeInternal _FundamentalSpace_default_instance_;
}  // namespace Schola
PROTOBUF_NAMESPACE_OPEN
template<> ::Schola::BinarySpace* Arena::CreateMaybeMessage<::Schola::BinarySpace>(Arena*);
template<> ::Schola::BoxSpace* Arena::CreateMaybeMessage<::Schola::BoxSpace>(Arena*);
template<> ::Schola::BoxSpace_BoxSpaceDimension* Arena::CreateMaybeMessage<::Schola::BoxSpace_BoxSpaceDimension>(Arena*);
template<> ::Schola::DictSpace* Arena::CreateMaybeMessage<::Schola::DictSpace>(Arena*);
template<> ::Schola::DiscreteSpace* Arena::CreateMaybeMessage<::Schola::DiscreteSpace>(Arena*);
template<> ::Schola::FundamentalSpace* Arena::CreateMaybeMessage<::Schola::FundamentalSpace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Schola {

// ===================================================================

class BoxSpace_BoxSpaceDimension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.BoxSpace.BoxSpaceDimension) */ {
 public:
  inline BoxSpace_BoxSpaceDimension() : BoxSpace_BoxSpaceDimension(nullptr) {}
  ~BoxSpace_BoxSpaceDimension() override;
  explicit PROTOBUF_CONSTEXPR BoxSpace_BoxSpaceDimension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxSpace_BoxSpaceDimension(const BoxSpace_BoxSpaceDimension& from);
  BoxSpace_BoxSpaceDimension(BoxSpace_BoxSpaceDimension&& from) noexcept
    : BoxSpace_BoxSpaceDimension() {
    *this = ::std::move(from);
  }

  inline BoxSpace_BoxSpaceDimension& operator=(const BoxSpace_BoxSpaceDimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxSpace_BoxSpaceDimension& operator=(BoxSpace_BoxSpaceDimension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxSpace_BoxSpaceDimension& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxSpace_BoxSpaceDimension* internal_default_instance() {
    return reinterpret_cast<const BoxSpace_BoxSpaceDimension*>(
               &_BoxSpace_BoxSpaceDimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoxSpace_BoxSpaceDimension& a, BoxSpace_BoxSpaceDimension& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxSpace_BoxSpaceDimension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxSpace_BoxSpaceDimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxSpace_BoxSpaceDimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoxSpace_BoxSpaceDimension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoxSpace_BoxSpaceDimension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoxSpace_BoxSpaceDimension& from) {
    BoxSpace_BoxSpaceDimension::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxSpace_BoxSpaceDimension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.BoxSpace.BoxSpaceDimension";
  }
  protected:
  explicit BoxSpace_BoxSpaceDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowFieldNumber = 1,
    kHighFieldNumber = 2,
  };
  // float low = 1;
  void clear_low();
  float low() const;
  void set_low(float value);
  private:
  float _internal_low() const;
  void _internal_set_low(float value);
  public:

  // float high = 2;
  void clear_high();
  float high() const;
  void set_high(float value);
  private:
  float _internal_high() const;
  void _internal_set_high(float value);
  public:

  // @@protoc_insertion_point(class_scope:Schola.BoxSpace.BoxSpaceDimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float low_;
    float high_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Spaces_2eproto;
};
// -------------------------------------------------------------------

class BoxSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.BoxSpace) */ {
 public:
  inline BoxSpace() : BoxSpace(nullptr) {}
  ~BoxSpace() override;
  explicit PROTOBUF_CONSTEXPR BoxSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxSpace(const BoxSpace& from);
  BoxSpace(BoxSpace&& from) noexcept
    : BoxSpace() {
    *this = ::std::move(from);
  }

  inline BoxSpace& operator=(const BoxSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxSpace& operator=(BoxSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxSpace* internal_default_instance() {
    return reinterpret_cast<const BoxSpace*>(
               &_BoxSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoxSpace& a, BoxSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoxSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoxSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoxSpace& from) {
    BoxSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.BoxSpace";
  }
  protected:
  explicit BoxSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BoxSpace_BoxSpaceDimension BoxSpaceDimension;

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 1,
  };
  // repeated .Schola.BoxSpace.BoxSpaceDimension dimensions = 1;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  ::Schola::BoxSpace_BoxSpaceDimension* mutable_dimensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::BoxSpace_BoxSpaceDimension >*
      mutable_dimensions();
  private:
  const ::Schola::BoxSpace_BoxSpaceDimension& _internal_dimensions(int index) const;
  ::Schola::BoxSpace_BoxSpaceDimension* _internal_add_dimensions();
  public:
  const ::Schola::BoxSpace_BoxSpaceDimension& dimensions(int index) const;
  ::Schola::BoxSpace_BoxSpaceDimension* add_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::BoxSpace_BoxSpaceDimension >&
      dimensions() const;

  // @@protoc_insertion_point(class_scope:Schola.BoxSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::BoxSpace_BoxSpaceDimension > dimensions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Spaces_2eproto;
};
// -------------------------------------------------------------------

class DiscreteSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.DiscreteSpace) */ {
 public:
  inline DiscreteSpace() : DiscreteSpace(nullptr) {}
  ~DiscreteSpace() override;
  explicit PROTOBUF_CONSTEXPR DiscreteSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscreteSpace(const DiscreteSpace& from);
  DiscreteSpace(DiscreteSpace&& from) noexcept
    : DiscreteSpace() {
    *this = ::std::move(from);
  }

  inline DiscreteSpace& operator=(const DiscreteSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteSpace& operator=(DiscreteSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscreteSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscreteSpace* internal_default_instance() {
    return reinterpret_cast<const DiscreteSpace*>(
               &_DiscreteSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DiscreteSpace& a, DiscreteSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscreteSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscreteSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscreteSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscreteSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscreteSpace& from) {
    DiscreteSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.DiscreteSpace";
  }
  protected:
  explicit DiscreteSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
  };
  // repeated int32 high = 1;
  int high_size() const;
  private:
  int _internal_high_size() const;
  public:
  void clear_high();
  private:
  int32_t _internal_high(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_high() const;
  void _internal_add_high(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_high();
  public:
  int32_t high(int index) const;
  void set_high(int index, int32_t value);
  void add_high(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      high() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_high();

  // @@protoc_insertion_point(class_scope:Schola.DiscreteSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > high_;
    mutable std::atomic<int> _high_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Spaces_2eproto;
};
// -------------------------------------------------------------------

class BinarySpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.BinarySpace) */ {
 public:
  inline BinarySpace() : BinarySpace(nullptr) {}
  ~BinarySpace() override;
  explicit PROTOBUF_CONSTEXPR BinarySpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinarySpace(const BinarySpace& from);
  BinarySpace(BinarySpace&& from) noexcept
    : BinarySpace() {
    *this = ::std::move(from);
  }

  inline BinarySpace& operator=(const BinarySpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinarySpace& operator=(BinarySpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinarySpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinarySpace* internal_default_instance() {
    return reinterpret_cast<const BinarySpace*>(
               &_BinarySpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BinarySpace& a, BinarySpace& b) {
    a.Swap(&b);
  }
  inline void Swap(BinarySpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinarySpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinarySpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinarySpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinarySpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinarySpace& from) {
    BinarySpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinarySpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.BinarySpace";
  }
  protected:
  explicit BinarySpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
  };
  // int32 shape = 1;
  void clear_shape();
  int32_t shape() const;
  void set_shape(int32_t value);
  private:
  int32_t _internal_shape() const;
  void _internal_set_shape(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Schola.BinarySpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t shape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Spaces_2eproto;
};
// -------------------------------------------------------------------

class FundamentalSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.FundamentalSpace) */ {
 public:
  inline FundamentalSpace() : FundamentalSpace(nullptr) {}
  ~FundamentalSpace() override;
  explicit PROTOBUF_CONSTEXPR FundamentalSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FundamentalSpace(const FundamentalSpace& from);
  FundamentalSpace(FundamentalSpace&& from) noexcept
    : FundamentalSpace() {
    *this = ::std::move(from);
  }

  inline FundamentalSpace& operator=(const FundamentalSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundamentalSpace& operator=(FundamentalSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FundamentalSpace& default_instance() {
    return *internal_default_instance();
  }
  enum SpaceCase {
    kBoxSpace = 1,
    kDiscreteSpace = 2,
    kBinarySpace = 3,
    SPACE_NOT_SET = 0,
  };

  static inline const FundamentalSpace* internal_default_instance() {
    return reinterpret_cast<const FundamentalSpace*>(
               &_FundamentalSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FundamentalSpace& a, FundamentalSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(FundamentalSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FundamentalSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FundamentalSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FundamentalSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FundamentalSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FundamentalSpace& from) {
    FundamentalSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundamentalSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.FundamentalSpace";
  }
  protected:
  explicit FundamentalSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxSpaceFieldNumber = 1,
    kDiscreteSpaceFieldNumber = 2,
    kBinarySpaceFieldNumber = 3,
  };
  // .Schola.BoxSpace box_space = 1;
  bool has_box_space() const;
  private:
  bool _internal_has_box_space() const;
  public:
  void clear_box_space();
  const ::Schola::BoxSpace& box_space() const;
  PROTOBUF_NODISCARD ::Schola::BoxSpace* release_box_space();
  ::Schola::BoxSpace* mutable_box_space();
  void set_allocated_box_space(::Schola::BoxSpace* box_space);
  private:
  const ::Schola::BoxSpace& _internal_box_space() const;
  ::Schola::BoxSpace* _internal_mutable_box_space();
  public:
  void unsafe_arena_set_allocated_box_space(
      ::Schola::BoxSpace* box_space);
  ::Schola::BoxSpace* unsafe_arena_release_box_space();

  // .Schola.DiscreteSpace discrete_space = 2;
  bool has_discrete_space() const;
  private:
  bool _internal_has_discrete_space() const;
  public:
  void clear_discrete_space();
  const ::Schola::DiscreteSpace& discrete_space() const;
  PROTOBUF_NODISCARD ::Schola::DiscreteSpace* release_discrete_space();
  ::Schola::DiscreteSpace* mutable_discrete_space();
  void set_allocated_discrete_space(::Schola::DiscreteSpace* discrete_space);
  private:
  const ::Schola::DiscreteSpace& _internal_discrete_space() const;
  ::Schola::DiscreteSpace* _internal_mutable_discrete_space();
  public:
  void unsafe_arena_set_allocated_discrete_space(
      ::Schola::DiscreteSpace* discrete_space);
  ::Schola::DiscreteSpace* unsafe_arena_release_discrete_space();

  // .Schola.BinarySpace binary_space = 3;
  bool has_binary_space() const;
  private:
  bool _internal_has_binary_space() const;
  public:
  void clear_binary_space();
  const ::Schola::BinarySpace& binary_space() const;
  PROTOBUF_NODISCARD ::Schola::BinarySpace* release_binary_space();
  ::Schola::BinarySpace* mutable_binary_space();
  void set_allocated_binary_space(::Schola::BinarySpace* binary_space);
  private:
  const ::Schola::BinarySpace& _internal_binary_space() const;
  ::Schola::BinarySpace* _internal_mutable_binary_space();
  public:
  void unsafe_arena_set_allocated_binary_space(
      ::Schola::BinarySpace* binary_space);
  ::Schola::BinarySpace* unsafe_arena_release_binary_space();

  void clear_space();
  SpaceCase space_case() const;
  // @@protoc_insertion_point(class_scope:Schola.FundamentalSpace)
 private:
  class _Internal;
  void set_has_box_space();
  void set_has_discrete_space();
  void set_has_binary_space();

  inline bool has_space() const;
  inline void clear_has_space();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SpaceUnion {
      constexpr SpaceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Schola::BoxSpace* box_space_;
      ::Schola::DiscreteSpace* discrete_space_;
      ::Schola::BinarySpace* binary_space_;
    } space_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Spaces_2eproto;
};
// -------------------------------------------------------------------

class DictSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Schola.DictSpace) */ {
 public:
  inline DictSpace() : DictSpace(nullptr) {}
  ~DictSpace() override;
  explicit PROTOBUF_CONSTEXPR DictSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DictSpace(const DictSpace& from);
  DictSpace(DictSpace&& from) noexcept
    : DictSpace() {
    *this = ::std::move(from);
  }

  inline DictSpace& operator=(const DictSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictSpace& operator=(DictSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DictSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const DictSpace* internal_default_instance() {
    return reinterpret_cast<const DictSpace*>(
               &_DictSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DictSpace& a, DictSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(DictSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DictSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DictSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DictSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DictSpace& from) {
    DictSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Schola.DictSpace";
  }
  protected:
  explicit DictSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
    kLabelsFieldNumber = 2,
  };
  // repeated .Schola.FundamentalSpace values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Schola::FundamentalSpace* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalSpace >*
      mutable_values();
  private:
  const ::Schola::FundamentalSpace& _internal_values(int index) const;
  ::Schola::FundamentalSpace* _internal_add_values();
  public:
  const ::Schola::FundamentalSpace& values(int index) const;
  ::Schola::FundamentalSpace* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalSpace >&
      values() const;

  // repeated string labels = 2;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // @@protoc_insertion_point(class_scope:Schola.DictSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalSpace > values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Spaces_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoxSpace_BoxSpaceDimension

// float low = 1;
inline void BoxSpace_BoxSpaceDimension::clear_low() {
  _impl_.low_ = 0;
}
inline float BoxSpace_BoxSpaceDimension::_internal_low() const {
  return _impl_.low_;
}
inline float BoxSpace_BoxSpaceDimension::low() const {
  // @@protoc_insertion_point(field_get:Schola.BoxSpace.BoxSpaceDimension.low)
  return _internal_low();
}
inline void BoxSpace_BoxSpaceDimension::_internal_set_low(float value) {
  
  _impl_.low_ = value;
}
inline void BoxSpace_BoxSpaceDimension::set_low(float value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:Schola.BoxSpace.BoxSpaceDimension.low)
}

// float high = 2;
inline void BoxSpace_BoxSpaceDimension::clear_high() {
  _impl_.high_ = 0;
}
inline float BoxSpace_BoxSpaceDimension::_internal_high() const {
  return _impl_.high_;
}
inline float BoxSpace_BoxSpaceDimension::high() const {
  // @@protoc_insertion_point(field_get:Schola.BoxSpace.BoxSpaceDimension.high)
  return _internal_high();
}
inline void BoxSpace_BoxSpaceDimension::_internal_set_high(float value) {
  
  _impl_.high_ = value;
}
inline void BoxSpace_BoxSpaceDimension::set_high(float value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:Schola.BoxSpace.BoxSpaceDimension.high)
}

// -------------------------------------------------------------------

// BoxSpace

// repeated .Schola.BoxSpace.BoxSpaceDimension dimensions = 1;
inline int BoxSpace::_internal_dimensions_size() const {
  return _impl_.dimensions_.size();
}
inline int BoxSpace::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void BoxSpace::clear_dimensions() {
  _impl_.dimensions_.Clear();
}
inline ::Schola::BoxSpace_BoxSpaceDimension* BoxSpace::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:Schola.BoxSpace.dimensions)
  return _impl_.dimensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::BoxSpace_BoxSpaceDimension >*
BoxSpace::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:Schola.BoxSpace.dimensions)
  return &_impl_.dimensions_;
}
inline const ::Schola::BoxSpace_BoxSpaceDimension& BoxSpace::_internal_dimensions(int index) const {
  return _impl_.dimensions_.Get(index);
}
inline const ::Schola::BoxSpace_BoxSpaceDimension& BoxSpace::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:Schola.BoxSpace.dimensions)
  return _internal_dimensions(index);
}
inline ::Schola::BoxSpace_BoxSpaceDimension* BoxSpace::_internal_add_dimensions() {
  return _impl_.dimensions_.Add();
}
inline ::Schola::BoxSpace_BoxSpaceDimension* BoxSpace::add_dimensions() {
  ::Schola::BoxSpace_BoxSpaceDimension* _add = _internal_add_dimensions();
  // @@protoc_insertion_point(field_add:Schola.BoxSpace.dimensions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::BoxSpace_BoxSpaceDimension >&
BoxSpace::dimensions() const {
  // @@protoc_insertion_point(field_list:Schola.BoxSpace.dimensions)
  return _impl_.dimensions_;
}

// -------------------------------------------------------------------

// DiscreteSpace

// repeated int32 high = 1;
inline int DiscreteSpace::_internal_high_size() const {
  return _impl_.high_.size();
}
inline int DiscreteSpace::high_size() const {
  return _internal_high_size();
}
inline void DiscreteSpace::clear_high() {
  _impl_.high_.Clear();
}
inline int32_t DiscreteSpace::_internal_high(int index) const {
  return _impl_.high_.Get(index);
}
inline int32_t DiscreteSpace::high(int index) const {
  // @@protoc_insertion_point(field_get:Schola.DiscreteSpace.high)
  return _internal_high(index);
}
inline void DiscreteSpace::set_high(int index, int32_t value) {
  _impl_.high_.Set(index, value);
  // @@protoc_insertion_point(field_set:Schola.DiscreteSpace.high)
}
inline void DiscreteSpace::_internal_add_high(int32_t value) {
  _impl_.high_.Add(value);
}
inline void DiscreteSpace::add_high(int32_t value) {
  _internal_add_high(value);
  // @@protoc_insertion_point(field_add:Schola.DiscreteSpace.high)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DiscreteSpace::_internal_high() const {
  return _impl_.high_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DiscreteSpace::high() const {
  // @@protoc_insertion_point(field_list:Schola.DiscreteSpace.high)
  return _internal_high();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DiscreteSpace::_internal_mutable_high() {
  return &_impl_.high_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DiscreteSpace::mutable_high() {
  // @@protoc_insertion_point(field_mutable_list:Schola.DiscreteSpace.high)
  return _internal_mutable_high();
}

// -------------------------------------------------------------------

// BinarySpace

// int32 shape = 1;
inline void BinarySpace::clear_shape() {
  _impl_.shape_ = 0;
}
inline int32_t BinarySpace::_internal_shape() const {
  return _impl_.shape_;
}
inline int32_t BinarySpace::shape() const {
  // @@protoc_insertion_point(field_get:Schola.BinarySpace.shape)
  return _internal_shape();
}
inline void BinarySpace::_internal_set_shape(int32_t value) {
  
  _impl_.shape_ = value;
}
inline void BinarySpace::set_shape(int32_t value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:Schola.BinarySpace.shape)
}

// -------------------------------------------------------------------

// FundamentalSpace

// .Schola.BoxSpace box_space = 1;
inline bool FundamentalSpace::_internal_has_box_space() const {
  return space_case() == kBoxSpace;
}
inline bool FundamentalSpace::has_box_space() const {
  return _internal_has_box_space();
}
inline void FundamentalSpace::set_has_box_space() {
  _impl_._oneof_case_[0] = kBoxSpace;
}
inline void FundamentalSpace::clear_box_space() {
  if (_internal_has_box_space()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.space_.box_space_;
    }
    clear_has_space();
  }
}
inline ::Schola::BoxSpace* FundamentalSpace::release_box_space() {
  // @@protoc_insertion_point(field_release:Schola.FundamentalSpace.box_space)
  if (_internal_has_box_space()) {
    clear_has_space();
    ::Schola::BoxSpace* temp = _impl_.space_.box_space_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.space_.box_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Schola::BoxSpace& FundamentalSpace::_internal_box_space() const {
  return _internal_has_box_space()
      ? *_impl_.space_.box_space_
      : reinterpret_cast< ::Schola::BoxSpace&>(::Schola::_BoxSpace_default_instance_);
}
inline const ::Schola::BoxSpace& FundamentalSpace::box_space() const {
  // @@protoc_insertion_point(field_get:Schola.FundamentalSpace.box_space)
  return _internal_box_space();
}
inline ::Schola::BoxSpace* FundamentalSpace::unsafe_arena_release_box_space() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Schola.FundamentalSpace.box_space)
  if (_internal_has_box_space()) {
    clear_has_space();
    ::Schola::BoxSpace* temp = _impl_.space_.box_space_;
    _impl_.space_.box_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FundamentalSpace::unsafe_arena_set_allocated_box_space(::Schola::BoxSpace* box_space) {
  clear_space();
  if (box_space) {
    set_has_box_space();
    _impl_.space_.box_space_ = box_space;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Schola.FundamentalSpace.box_space)
}
inline ::Schola::BoxSpace* FundamentalSpace::_internal_mutable_box_space() {
  if (!_internal_has_box_space()) {
    clear_space();
    set_has_box_space();
    _impl_.space_.box_space_ = CreateMaybeMessage< ::Schola::BoxSpace >(GetArenaForAllocation());
  }
  return _impl_.space_.box_space_;
}
inline ::Schola::BoxSpace* FundamentalSpace::mutable_box_space() {
  ::Schola::BoxSpace* _msg = _internal_mutable_box_space();
  // @@protoc_insertion_point(field_mutable:Schola.FundamentalSpace.box_space)
  return _msg;
}

// .Schola.DiscreteSpace discrete_space = 2;
inline bool FundamentalSpace::_internal_has_discrete_space() const {
  return space_case() == kDiscreteSpace;
}
inline bool FundamentalSpace::has_discrete_space() const {
  return _internal_has_discrete_space();
}
inline void FundamentalSpace::set_has_discrete_space() {
  _impl_._oneof_case_[0] = kDiscreteSpace;
}
inline void FundamentalSpace::clear_discrete_space() {
  if (_internal_has_discrete_space()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.space_.discrete_space_;
    }
    clear_has_space();
  }
}
inline ::Schola::DiscreteSpace* FundamentalSpace::release_discrete_space() {
  // @@protoc_insertion_point(field_release:Schola.FundamentalSpace.discrete_space)
  if (_internal_has_discrete_space()) {
    clear_has_space();
    ::Schola::DiscreteSpace* temp = _impl_.space_.discrete_space_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.space_.discrete_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Schola::DiscreteSpace& FundamentalSpace::_internal_discrete_space() const {
  return _internal_has_discrete_space()
      ? *_impl_.space_.discrete_space_
      : reinterpret_cast< ::Schola::DiscreteSpace&>(::Schola::_DiscreteSpace_default_instance_);
}
inline const ::Schola::DiscreteSpace& FundamentalSpace::discrete_space() const {
  // @@protoc_insertion_point(field_get:Schola.FundamentalSpace.discrete_space)
  return _internal_discrete_space();
}
inline ::Schola::DiscreteSpace* FundamentalSpace::unsafe_arena_release_discrete_space() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Schola.FundamentalSpace.discrete_space)
  if (_internal_has_discrete_space()) {
    clear_has_space();
    ::Schola::DiscreteSpace* temp = _impl_.space_.discrete_space_;
    _impl_.space_.discrete_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FundamentalSpace::unsafe_arena_set_allocated_discrete_space(::Schola::DiscreteSpace* discrete_space) {
  clear_space();
  if (discrete_space) {
    set_has_discrete_space();
    _impl_.space_.discrete_space_ = discrete_space;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Schola.FundamentalSpace.discrete_space)
}
inline ::Schola::DiscreteSpace* FundamentalSpace::_internal_mutable_discrete_space() {
  if (!_internal_has_discrete_space()) {
    clear_space();
    set_has_discrete_space();
    _impl_.space_.discrete_space_ = CreateMaybeMessage< ::Schola::DiscreteSpace >(GetArenaForAllocation());
  }
  return _impl_.space_.discrete_space_;
}
inline ::Schola::DiscreteSpace* FundamentalSpace::mutable_discrete_space() {
  ::Schola::DiscreteSpace* _msg = _internal_mutable_discrete_space();
  // @@protoc_insertion_point(field_mutable:Schola.FundamentalSpace.discrete_space)
  return _msg;
}

// .Schola.BinarySpace binary_space = 3;
inline bool FundamentalSpace::_internal_has_binary_space() const {
  return space_case() == kBinarySpace;
}
inline bool FundamentalSpace::has_binary_space() const {
  return _internal_has_binary_space();
}
inline void FundamentalSpace::set_has_binary_space() {
  _impl_._oneof_case_[0] = kBinarySpace;
}
inline void FundamentalSpace::clear_binary_space() {
  if (_internal_has_binary_space()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.space_.binary_space_;
    }
    clear_has_space();
  }
}
inline ::Schola::BinarySpace* FundamentalSpace::release_binary_space() {
  // @@protoc_insertion_point(field_release:Schola.FundamentalSpace.binary_space)
  if (_internal_has_binary_space()) {
    clear_has_space();
    ::Schola::BinarySpace* temp = _impl_.space_.binary_space_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.space_.binary_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Schola::BinarySpace& FundamentalSpace::_internal_binary_space() const {
  return _internal_has_binary_space()
      ? *_impl_.space_.binary_space_
      : reinterpret_cast< ::Schola::BinarySpace&>(::Schola::_BinarySpace_default_instance_);
}
inline const ::Schola::BinarySpace& FundamentalSpace::binary_space() const {
  // @@protoc_insertion_point(field_get:Schola.FundamentalSpace.binary_space)
  return _internal_binary_space();
}
inline ::Schola::BinarySpace* FundamentalSpace::unsafe_arena_release_binary_space() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Schola.FundamentalSpace.binary_space)
  if (_internal_has_binary_space()) {
    clear_has_space();
    ::Schola::BinarySpace* temp = _impl_.space_.binary_space_;
    _impl_.space_.binary_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FundamentalSpace::unsafe_arena_set_allocated_binary_space(::Schola::BinarySpace* binary_space) {
  clear_space();
  if (binary_space) {
    set_has_binary_space();
    _impl_.space_.binary_space_ = binary_space;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Schola.FundamentalSpace.binary_space)
}
inline ::Schola::BinarySpace* FundamentalSpace::_internal_mutable_binary_space() {
  if (!_internal_has_binary_space()) {
    clear_space();
    set_has_binary_space();
    _impl_.space_.binary_space_ = CreateMaybeMessage< ::Schola::BinarySpace >(GetArenaForAllocation());
  }
  return _impl_.space_.binary_space_;
}
inline ::Schola::BinarySpace* FundamentalSpace::mutable_binary_space() {
  ::Schola::BinarySpace* _msg = _internal_mutable_binary_space();
  // @@protoc_insertion_point(field_mutable:Schola.FundamentalSpace.binary_space)
  return _msg;
}

inline bool FundamentalSpace::has_space() const {
  return space_case() != SPACE_NOT_SET;
}
inline void FundamentalSpace::clear_has_space() {
  _impl_._oneof_case_[0] = SPACE_NOT_SET;
}
inline FundamentalSpace::SpaceCase FundamentalSpace::space_case() const {
  return FundamentalSpace::SpaceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DictSpace

// repeated .Schola.FundamentalSpace values = 1;
inline int DictSpace::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int DictSpace::values_size() const {
  return _internal_values_size();
}
inline void DictSpace::clear_values() {
  _impl_.values_.Clear();
}
inline ::Schola::FundamentalSpace* DictSpace::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Schola.DictSpace.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalSpace >*
DictSpace::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Schola.DictSpace.values)
  return &_impl_.values_;
}
inline const ::Schola::FundamentalSpace& DictSpace::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::Schola::FundamentalSpace& DictSpace::values(int index) const {
  // @@protoc_insertion_point(field_get:Schola.DictSpace.values)
  return _internal_values(index);
}
inline ::Schola::FundamentalSpace* DictSpace::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::Schola::FundamentalSpace* DictSpace::add_values() {
  ::Schola::FundamentalSpace* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:Schola.DictSpace.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Schola::FundamentalSpace >&
DictSpace::values() const {
  // @@protoc_insertion_point(field_list:Schola.DictSpace.values)
  return _impl_.values_;
}

// repeated string labels = 2;
inline int DictSpace::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int DictSpace::labels_size() const {
  return _internal_labels_size();
}
inline void DictSpace::clear_labels() {
  _impl_.labels_.Clear();
}
inline std::string* DictSpace::add_labels() {
  std::string* _s = _internal_add_labels();
  // @@protoc_insertion_point(field_add_mutable:Schola.DictSpace.labels)
  return _s;
}
inline const std::string& DictSpace::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const std::string& DictSpace::labels(int index) const {
  // @@protoc_insertion_point(field_get:Schola.DictSpace.labels)
  return _internal_labels(index);
}
inline std::string* DictSpace::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Schola.DictSpace.labels)
  return _impl_.labels_.Mutable(index);
}
inline void DictSpace::set_labels(int index, const std::string& value) {
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Schola.DictSpace.labels)
}
inline void DictSpace::set_labels(int index, std::string&& value) {
  _impl_.labels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Schola.DictSpace.labels)
}
inline void DictSpace::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Schola.DictSpace.labels)
}
inline void DictSpace::set_labels(int index, const char* value, size_t size) {
  _impl_.labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Schola.DictSpace.labels)
}
inline std::string* DictSpace::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline void DictSpace::add_labels(const std::string& value) {
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Schola.DictSpace.labels)
}
inline void DictSpace::add_labels(std::string&& value) {
  _impl_.labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Schola.DictSpace.labels)
}
inline void DictSpace::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Schola.DictSpace.labels)
}
inline void DictSpace::add_labels(const char* value, size_t size) {
  _impl_.labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Schola.DictSpace.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DictSpace::labels() const {
  // @@protoc_insertion_point(field_list:Schola.DictSpace.labels)
  return _impl_.labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DictSpace::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Schola.DictSpace.labels)
  return &_impl_.labels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Schola

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Spaces_2eproto
