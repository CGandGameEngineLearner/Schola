// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GymConnector.proto

#include "GymConnector.pb.h"
#include "GymConnector.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Schola {

static const char* GymService_method_names[] = {
  "/Schola.GymService/UpdateState",
  "/Schola.GymService/RequestInitialTrainingState",
  "/Schola.GymService/RequestTrainingDefinition",
  "/Schola.GymService/StartGymConnector",
};

std::unique_ptr< GymService::Stub> GymService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GymService::Stub> stub(new GymService::Stub(channel, options));
  return stub;
}

GymService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateState_(GymService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestInitialTrainingState_(GymService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestTrainingDefinition_(GymService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartGymConnector_(GymService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GymService::Stub::UpdateState(::grpc::ClientContext* context, const ::Schola::TrainingStateUpdate& request, ::Schola::TrainingState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Schola::TrainingStateUpdate, ::Schola::TrainingState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateState_, context, request, response);
}

void GymService::Stub::async::UpdateState(::grpc::ClientContext* context, const ::Schola::TrainingStateUpdate* request, ::Schola::TrainingState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Schola::TrainingStateUpdate, ::Schola::TrainingState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateState_, context, request, response, std::move(f));
}

void GymService::Stub::async::UpdateState(::grpc::ClientContext* context, const ::Schola::TrainingStateUpdate* request, ::Schola::TrainingState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Schola::TrainingState>* GymService::Stub::PrepareAsyncUpdateStateRaw(::grpc::ClientContext* context, const ::Schola::TrainingStateUpdate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Schola::TrainingState, ::Schola::TrainingStateUpdate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Schola::TrainingState>* GymService::Stub::AsyncUpdateStateRaw(::grpc::ClientContext* context, const ::Schola::TrainingStateUpdate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GymService::Stub::RequestInitialTrainingState(::grpc::ClientContext* context, const ::Schola::InitialTrainingStateRequest& request, ::Schola::InitialTrainingState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Schola::InitialTrainingStateRequest, ::Schola::InitialTrainingState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestInitialTrainingState_, context, request, response);
}

void GymService::Stub::async::RequestInitialTrainingState(::grpc::ClientContext* context, const ::Schola::InitialTrainingStateRequest* request, ::Schola::InitialTrainingState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Schola::InitialTrainingStateRequest, ::Schola::InitialTrainingState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestInitialTrainingState_, context, request, response, std::move(f));
}

void GymService::Stub::async::RequestInitialTrainingState(::grpc::ClientContext* context, const ::Schola::InitialTrainingStateRequest* request, ::Schola::InitialTrainingState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestInitialTrainingState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Schola::InitialTrainingState>* GymService::Stub::PrepareAsyncRequestInitialTrainingStateRaw(::grpc::ClientContext* context, const ::Schola::InitialTrainingStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Schola::InitialTrainingState, ::Schola::InitialTrainingStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestInitialTrainingState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Schola::InitialTrainingState>* GymService::Stub::AsyncRequestInitialTrainingStateRaw(::grpc::ClientContext* context, const ::Schola::InitialTrainingStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestInitialTrainingStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GymService::Stub::RequestTrainingDefinition(::grpc::ClientContext* context, const ::Schola::TrainingDefinitionRequest& request, ::Schola::TrainingDefinition* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Schola::TrainingDefinitionRequest, ::Schola::TrainingDefinition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestTrainingDefinition_, context, request, response);
}

void GymService::Stub::async::RequestTrainingDefinition(::grpc::ClientContext* context, const ::Schola::TrainingDefinitionRequest* request, ::Schola::TrainingDefinition* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Schola::TrainingDefinitionRequest, ::Schola::TrainingDefinition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestTrainingDefinition_, context, request, response, std::move(f));
}

void GymService::Stub::async::RequestTrainingDefinition(::grpc::ClientContext* context, const ::Schola::TrainingDefinitionRequest* request, ::Schola::TrainingDefinition* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestTrainingDefinition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Schola::TrainingDefinition>* GymService::Stub::PrepareAsyncRequestTrainingDefinitionRaw(::grpc::ClientContext* context, const ::Schola::TrainingDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Schola::TrainingDefinition, ::Schola::TrainingDefinitionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestTrainingDefinition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Schola::TrainingDefinition>* GymService::Stub::AsyncRequestTrainingDefinitionRaw(::grpc::ClientContext* context, const ::Schola::TrainingDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestTrainingDefinitionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GymService::Stub::StartGymConnector(::grpc::ClientContext* context, const ::Schola::GymConnectorStartRequest& request, ::Schola::GymConnectorStartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Schola::GymConnectorStartRequest, ::Schola::GymConnectorStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartGymConnector_, context, request, response);
}

void GymService::Stub::async::StartGymConnector(::grpc::ClientContext* context, const ::Schola::GymConnectorStartRequest* request, ::Schola::GymConnectorStartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Schola::GymConnectorStartRequest, ::Schola::GymConnectorStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartGymConnector_, context, request, response, std::move(f));
}

void GymService::Stub::async::StartGymConnector(::grpc::ClientContext* context, const ::Schola::GymConnectorStartRequest* request, ::Schola::GymConnectorStartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartGymConnector_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Schola::GymConnectorStartResponse>* GymService::Stub::PrepareAsyncStartGymConnectorRaw(::grpc::ClientContext* context, const ::Schola::GymConnectorStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Schola::GymConnectorStartResponse, ::Schola::GymConnectorStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartGymConnector_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Schola::GymConnectorStartResponse>* GymService::Stub::AsyncStartGymConnectorRaw(::grpc::ClientContext* context, const ::Schola::GymConnectorStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartGymConnectorRaw(context, request, cq);
  result->StartCall();
  return result;
}

GymService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::Schola::TrainingStateUpdate, ::Schola::TrainingState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Schola::TrainingStateUpdate* req,
             ::Schola::TrainingState* resp) {
               return service->UpdateState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::Schola::InitialTrainingStateRequest, ::Schola::InitialTrainingState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Schola::InitialTrainingStateRequest* req,
             ::Schola::InitialTrainingState* resp) {
               return service->RequestInitialTrainingState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::Schola::TrainingDefinitionRequest, ::Schola::TrainingDefinition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Schola::TrainingDefinitionRequest* req,
             ::Schola::TrainingDefinition* resp) {
               return service->RequestTrainingDefinition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GymService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GymService::Service, ::Schola::GymConnectorStartRequest, ::Schola::GymConnectorStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GymService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Schola::GymConnectorStartRequest* req,
             ::Schola::GymConnectorStartResponse* resp) {
               return service->StartGymConnector(ctx, req, resp);
             }, this)));
}

GymService::Service::~Service() {
}

::grpc::Status GymService::Service::UpdateState(::grpc::ServerContext* context, const ::Schola::TrainingStateUpdate* request, ::Schola::TrainingState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GymService::Service::RequestInitialTrainingState(::grpc::ServerContext* context, const ::Schola::InitialTrainingStateRequest* request, ::Schola::InitialTrainingState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GymService::Service::RequestTrainingDefinition(::grpc::ServerContext* context, const ::Schola::TrainingDefinitionRequest* request, ::Schola::TrainingDefinition* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GymService::Service::StartGymConnector(::grpc::ServerContext* context, const ::Schola::GymConnectorStartRequest* request, ::Schola::GymConnectorStartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Schola

