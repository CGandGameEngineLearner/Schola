# Copyright (c) 2024 Advanced Micro Devices, Inc. All Rights Reserved.

import shutil
import pytest
from pathlib import Path
import subprocess

@pytest.mark.skip(reason="Not Implemented")
def test_build_proto():
    ...

@pytest.fixture
def doc_source_path() -> Path:
    return (Path(__file__).parent.parent / "Docs").absolute()

@pytest.fixture
def doxygen_docs_builder(doc_source_path):
    doxygen_doc_folder_path = doc_source_path / "Doxygen"

    def build_doxygen_docs() -> subprocess.CompletedProcess:
        shutil.rmtree(doxygen_doc_folder_path / "xml", ignore_errors=True)
        return subprocess.run(cwd=doxygen_doc_folder_path, args=["doxygen", "Doxyfile"])
    
    yield build_doxygen_docs

    #delete the built docs in the doxygen folder
    shutil.rmtree(doxygen_doc_folder_path / "xml")


@pytest.fixture
def breathe_docs_builder(doc_source_path):

    sphinx_doc_folder_path = doc_source_path / "Sphinx"
    def build_breathe_docs() -> subprocess.CompletedProcess:
        shutil.rmtree(sphinx_doc_folder_path / "API" / "Unreal",ignore_errors=True)
        return subprocess.run(cwd=sphinx_doc_folder_path, args=["breathe-apidoc", "-o", "API/Unreal", "../Doxygen/xml"])
    
    yield build_breathe_docs

    # delete the folder generated by breathe
    shutil.rmtree(sphinx_doc_folder_path / "API" / "Unreal")

@pytest.fixture
def sphinx_docs_builder(doc_source_path):

    sphinx_doc_folder_path = doc_source_path / "Sphinx"
    def build_sphinx_docs() -> subprocess.CompletedProcess:
        
        shutil.rmtree(sphinx_doc_folder_path / "_build", ignore_errors=True)
        return subprocess.run(cwd=sphinx_doc_folder_path, args=["sphinx-build", "-M", "html", ".", "_build"])
    
    yield build_sphinx_docs

    # delete the build docs folders, and the autosummary folder
    shutil.rmtree(sphinx_doc_folder_path / "_build")
    shutil.rmtree(sphinx_doc_folder_path / "API" / "Python")

def test_build_docs(doxygen_docs_builder, sphinx_docs_builder,breathe_docs_builder, doc_source_path):
    doxygen_build_process = doxygen_docs_builder()
    doxygen_build_process.check_returncode()
    assert (doc_source_path / "Doxygen" / "xml").exists(), "No xml from doxygen found"

    breathe_build_process = breathe_docs_builder()
    breathe_build_process.check_returncode()
    assert (doc_source_path / "Sphinx" / "API" / "Unreal").exists(), "No generated rst for unreal found"
    
    sphinx_build_process = sphinx_docs_builder()
    sphinx_build_process.check_returncode()
    assert (doc_source_path / "Sphinx" / "API" / "Python").exists(), "No generated rst for python found"
    assert (doc_source_path / "Sphinx" / "_build").exists(), "No built docs found from sphinx"